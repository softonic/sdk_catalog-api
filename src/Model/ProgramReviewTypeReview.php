<?php
/**
 * ProgramReviewTypeReview
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: 2.0.17-83
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Model;

use \ArrayAccess;

/**
 * ProgramReviewTypeReview Class Doc Comment
 *
 * @category    Class
 * @package     Softonic\CatalogApiSdk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProgramReviewTypeReview implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProgramReviewTypeReview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id_program' => 'string',
        'id_review_type' => 'string',
        'id_review' => 'string',
        'public_note' => 'string',
        'type' => 'string',
        'rating' => 'int',
        'headline' => 'string',
        'lead' => 'string',
        'subfeatures' => 'string',
        'features' => 'string',
        'subusability' => 'string',
        'usability' => 'string',
        'subconclusion' => 'string',
        'conclusion' => 'string',
        'changes' => 'string',
        'extra' => 'string',
        'pros' => 'string[]',
        'cons' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id_program' => 'id_program',
        'id_review_type' => 'id_review_type',
        'id_review' => 'id_review',
        'public_note' => 'public_note',
        'type' => 'type',
        'rating' => 'rating',
        'headline' => 'headline',
        'lead' => 'lead',
        'subfeatures' => 'subfeatures',
        'features' => 'features',
        'subusability' => 'subusability',
        'usability' => 'usability',
        'subconclusion' => 'subconclusion',
        'conclusion' => 'conclusion',
        'changes' => 'changes',
        'extra' => 'extra',
        'pros' => 'pros',
        'cons' => 'cons'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id_program' => 'setIdProgram',
        'id_review_type' => 'setIdReviewType',
        'id_review' => 'setIdReview',
        'public_note' => 'setPublicNote',
        'type' => 'setType',
        'rating' => 'setRating',
        'headline' => 'setHeadline',
        'lead' => 'setLead',
        'subfeatures' => 'setSubfeatures',
        'features' => 'setFeatures',
        'subusability' => 'setSubusability',
        'usability' => 'setUsability',
        'subconclusion' => 'setSubconclusion',
        'conclusion' => 'setConclusion',
        'changes' => 'setChanges',
        'extra' => 'setExtra',
        'pros' => 'setPros',
        'cons' => 'setCons'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id_program' => 'getIdProgram',
        'id_review_type' => 'getIdReviewType',
        'id_review' => 'getIdReview',
        'public_note' => 'getPublicNote',
        'type' => 'getType',
        'rating' => 'getRating',
        'headline' => 'getHeadline',
        'lead' => 'getLead',
        'subfeatures' => 'getSubfeatures',
        'features' => 'getFeatures',
        'subusability' => 'getSubusability',
        'usability' => 'getUsability',
        'subconclusion' => 'getSubconclusion',
        'conclusion' => 'getConclusion',
        'changes' => 'getChanges',
        'extra' => 'getExtra',
        'pros' => 'getPros',
        'cons' => 'getCons'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const ID_REVIEW_TYPE_CORPORATE = 'corporate';
    const ID_REVIEW_TYPE_DEVELOPER = 'developer';
    const TYPE_AUTO = 'auto';
    const TYPE_SEMIAUTO = 'semiauto';
    const TYPE_STANDARD = 'standard';
    const TYPE_TOP = 'top';
    const TYPE_UNDETERMINED = 'undetermined';
    const TYPE_FASTCLONED = 'fastcloned';
    const TYPE_NOREVIEW = 'noreview';
    const TYPE_PREVIEW = 'preview';
    const TYPE_CORE = 'core';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getIdReviewTypeAllowableValues()
    {
        return [
            self::ID_REVIEW_TYPE_CORPORATE,
            self::ID_REVIEW_TYPE_DEVELOPER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AUTO,
            self::TYPE_SEMIAUTO,
            self::TYPE_STANDARD,
            self::TYPE_TOP,
            self::TYPE_UNDETERMINED,
            self::TYPE_FASTCLONED,
            self::TYPE_NOREVIEW,
            self::TYPE_PREVIEW,
            self::TYPE_CORE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_program'] = isset($data['id_program']) ? $data['id_program'] : null;
        $this->container['id_review_type'] = isset($data['id_review_type']) ? $data['id_review_type'] : null;
        $this->container['id_review'] = isset($data['id_review']) ? $data['id_review'] : null;
        $this->container['public_note'] = isset($data['public_note']) ? $data['public_note'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['headline'] = isset($data['headline']) ? $data['headline'] : null;
        $this->container['lead'] = isset($data['lead']) ? $data['lead'] : null;
        $this->container['subfeatures'] = isset($data['subfeatures']) ? $data['subfeatures'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['subusability'] = isset($data['subusability']) ? $data['subusability'] : null;
        $this->container['usability'] = isset($data['usability']) ? $data['usability'] : null;
        $this->container['subconclusion'] = isset($data['subconclusion']) ? $data['subconclusion'] : null;
        $this->container['conclusion'] = isset($data['conclusion']) ? $data['conclusion'] : null;
        $this->container['changes'] = isset($data['changes']) ? $data['changes'] : null;
        $this->container['extra'] = isset($data['extra']) ? $data['extra'] : null;
        $this->container['pros'] = isset($data['pros']) ? $data['pros'] : null;
        $this->container['cons'] = isset($data['cons']) ? $data['cons'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id_program'] === null) {
            $invalid_properties[] = "'id_program' can't be null";
        }
        if (strlen($this->container['id_program']) > 36) {
            $invalid_properties[] = "invalid value for 'id_program', the character length must be smaller than or equal to 36.";
        }
        if (strlen($this->container['id_program']) < 1) {
            $invalid_properties[] = "invalid value for 'id_program', the character length must be bigger than or equal to 1.";
        }
        if ($this->container['id_review_type'] === null) {
            $invalid_properties[] = "'id_review_type' can't be null";
        }
        $allowed_values = array("corporate", "developer");
        if (!in_array($this->container['id_review_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'id_review_type', must be one of #{allowed_values}.";
        }
        if ($this->container['id_review'] === null) {
            $invalid_properties[] = "'id_review' can't be null";
        }
        if (strlen($this->container['id_review']) > 36) {
            $invalid_properties[] = "invalid value for 'id_review', the character length must be smaller than or equal to 36.";
        }
        if (strlen($this->container['id_review']) < 36) {
            $invalid_properties[] = "invalid value for 'id_review', the character length must be bigger than or equal to 36.";
        }
        if (strlen($this->container['public_note']) > 65535) {
            $invalid_properties[] = "invalid value for 'public_note', the character length must be smaller than or equal to 65535.";
        }
        if (strlen($this->container['public_note']) < 1) {
            $invalid_properties[] = "invalid value for 'public_note', the character length must be bigger than or equal to 1.";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = array("auto", "semiauto", "standard", "top", "undetermined", "fastcloned", "noreview", "preview", "core");
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }
        if ($this->container['rating'] === null) {
            $invalid_properties[] = "'rating' can't be null";
        }
        if ($this->container['headline'] === null) {
            $invalid_properties[] = "'headline' can't be null";
        }
        if (strlen($this->container['headline']) > 80) {
            $invalid_properties[] = "invalid value for 'headline', the character length must be smaller than or equal to 80.";
        }
        if (strlen($this->container['headline']) < 1) {
            $invalid_properties[] = "invalid value for 'headline', the character length must be bigger than or equal to 1.";
        }
        if (strlen($this->container['lead']) > 500) {
            $invalid_properties[] = "invalid value for 'lead', the character length must be smaller than or equal to 500.";
        }
        if (strlen($this->container['lead']) < 1) {
            $invalid_properties[] = "invalid value for 'lead', the character length must be bigger than or equal to 1.";
        }
        if (strlen($this->container['subfeatures']) > 50) {
            $invalid_properties[] = "invalid value for 'subfeatures', the character length must be smaller than or equal to 50.";
        }
        if (strlen($this->container['subfeatures']) < 1) {
            $invalid_properties[] = "invalid value for 'subfeatures', the character length must be bigger than or equal to 1.";
        }
        if (strlen($this->container['features']) > 65535) {
            $invalid_properties[] = "invalid value for 'features', the character length must be smaller than or equal to 65535.";
        }
        if (strlen($this->container['features']) < 1) {
            $invalid_properties[] = "invalid value for 'features', the character length must be bigger than or equal to 1.";
        }
        if (strlen($this->container['subusability']) > 50) {
            $invalid_properties[] = "invalid value for 'subusability', the character length must be smaller than or equal to 50.";
        }
        if (strlen($this->container['subusability']) < 1) {
            $invalid_properties[] = "invalid value for 'subusability', the character length must be bigger than or equal to 1.";
        }
        if (strlen($this->container['usability']) > 65535) {
            $invalid_properties[] = "invalid value for 'usability', the character length must be smaller than or equal to 65535.";
        }
        if (strlen($this->container['usability']) < 1) {
            $invalid_properties[] = "invalid value for 'usability', the character length must be bigger than or equal to 1.";
        }
        if (strlen($this->container['subconclusion']) > 50) {
            $invalid_properties[] = "invalid value for 'subconclusion', the character length must be smaller than or equal to 50.";
        }
        if (strlen($this->container['subconclusion']) < 1) {
            $invalid_properties[] = "invalid value for 'subconclusion', the character length must be bigger than or equal to 1.";
        }
        if (strlen($this->container['conclusion']) > 65535) {
            $invalid_properties[] = "invalid value for 'conclusion', the character length must be smaller than or equal to 65535.";
        }
        if (strlen($this->container['conclusion']) < 1) {
            $invalid_properties[] = "invalid value for 'conclusion', the character length must be bigger than or equal to 1.";
        }
        if (strlen($this->container['changes']) > 65535) {
            $invalid_properties[] = "invalid value for 'changes', the character length must be smaller than or equal to 65535.";
        }
        if (strlen($this->container['changes']) < 1) {
            $invalid_properties[] = "invalid value for 'changes', the character length must be bigger than or equal to 1.";
        }
        if (strlen($this->container['extra']) > 65535) {
            $invalid_properties[] = "invalid value for 'extra', the character length must be smaller than or equal to 65535.";
        }
        if (strlen($this->container['extra']) < 1) {
            $invalid_properties[] = "invalid value for 'extra', the character length must be bigger than or equal to 1.";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id_program'] === null) {
            return false;
        }
        if (strlen($this->container['id_program']) > 36) {
            return false;
        }
        if (strlen($this->container['id_program']) < 1) {
            return false;
        }
        if ($this->container['id_review_type'] === null) {
            return false;
        }
        $allowed_values = array("corporate", "developer");
        if (!in_array($this->container['id_review_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['id_review'] === null) {
            return false;
        }
        if (strlen($this->container['id_review']) > 36) {
            return false;
        }
        if (strlen($this->container['id_review']) < 36) {
            return false;
        }
        if (strlen($this->container['public_note']) > 65535) {
            return false;
        }
        if (strlen($this->container['public_note']) < 1) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = array("auto", "semiauto", "standard", "top", "undetermined", "fastcloned", "noreview", "preview", "core");
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['rating'] === null) {
            return false;
        }
        if ($this->container['headline'] === null) {
            return false;
        }
        if (strlen($this->container['headline']) > 80) {
            return false;
        }
        if (strlen($this->container['headline']) < 1) {
            return false;
        }
        if (strlen($this->container['lead']) > 500) {
            return false;
        }
        if (strlen($this->container['lead']) < 1) {
            return false;
        }
        if (strlen($this->container['subfeatures']) > 50) {
            return false;
        }
        if (strlen($this->container['subfeatures']) < 1) {
            return false;
        }
        if (strlen($this->container['features']) > 65535) {
            return false;
        }
        if (strlen($this->container['features']) < 1) {
            return false;
        }
        if (strlen($this->container['subusability']) > 50) {
            return false;
        }
        if (strlen($this->container['subusability']) < 1) {
            return false;
        }
        if (strlen($this->container['usability']) > 65535) {
            return false;
        }
        if (strlen($this->container['usability']) < 1) {
            return false;
        }
        if (strlen($this->container['subconclusion']) > 50) {
            return false;
        }
        if (strlen($this->container['subconclusion']) < 1) {
            return false;
        }
        if (strlen($this->container['conclusion']) > 65535) {
            return false;
        }
        if (strlen($this->container['conclusion']) < 1) {
            return false;
        }
        if (strlen($this->container['changes']) > 65535) {
            return false;
        }
        if (strlen($this->container['changes']) < 1) {
            return false;
        }
        if (strlen($this->container['extra']) > 65535) {
            return false;
        }
        if (strlen($this->container['extra']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_program
     * @return string
     */
    public function getIdProgram()
    {
        return $this->container['id_program'];
    }

    /**
     * Sets id_program
     * @param string $id_program Program UUID or numeric ID
     * @return $this
     */
    public function setIdProgram($id_program)
    {
        if (strlen($id_program) > 36) {
            throw new \InvalidArgumentException('invalid length for $id_program when calling ProgramReviewTypeReview., must be smaller than or equal to 36.');
        }
        if (strlen($id_program) < 1) {
            throw new \InvalidArgumentException('invalid length for $id_program when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['id_program'] = $id_program;

        return $this;
    }

    /**
     * Gets id_review_type
     * @return string
     */
    public function getIdReviewType()
    {
        return $this->container['id_review_type'];
    }

    /**
     * Sets id_review_type
     * @param string $id_review_type Review owner type
     * @return $this
     */
    public function setIdReviewType($id_review_type)
    {
        $allowed_values = array('corporate', 'developer');
        if (!in_array($id_review_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'id_review_type', must be one of 'corporate', 'developer'");
        }
        $this->container['id_review_type'] = $id_review_type;

        return $this;
    }

    /**
     * Gets id_review
     * @return string
     */
    public function getIdReview()
    {
        return $this->container['id_review'];
    }

    /**
     * Sets id_review
     * @param string $id_review Review identifier as UUID
     * @return $this
     */
    public function setIdReview($id_review)
    {
        if (strlen($id_review) > 36) {
            throw new \InvalidArgumentException('invalid length for $id_review when calling ProgramReviewTypeReview., must be smaller than or equal to 36.');
        }
        if (strlen($id_review) < 36) {
            throw new \InvalidArgumentException('invalid length for $id_review when calling ProgramReviewTypeReview., must be bigger than or equal to 36.');
        }
        $this->container['id_review'] = $id_review;

        return $this;
    }

    /**
     * Gets public_note
     * @return string
     */
    public function getPublicNote()
    {
        return $this->container['public_note'];
    }

    /**
     * Sets public_note
     * @param string $public_note Public note.
     * @return $this
     */
    public function setPublicNote($public_note)
    {
        if (strlen($public_note) > 65535) {
            throw new \InvalidArgumentException('invalid length for $public_note when calling ProgramReviewTypeReview., must be smaller than or equal to 65535.');
        }
        if (strlen($public_note) < 1) {
            throw new \InvalidArgumentException('invalid length for $public_note when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['public_note'] = $public_note;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Review type. This field is used for tracking purposes. Ex: core
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('auto', 'semiauto', 'standard', 'top', 'undetermined', 'fastcloned', 'noreview', 'preview', 'core');
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'auto', 'semiauto', 'standard', 'top', 'undetermined', 'fastcloned', 'noreview', 'preview', 'core'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets rating
     * @return int
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     * @param int $rating Program rating.
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets headline
     * @return string
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     * @param string $headline Headline.
     * @return $this
     */
    public function setHeadline($headline)
    {
        if (strlen($headline) > 80) {
            throw new \InvalidArgumentException('invalid length for $headline when calling ProgramReviewTypeReview., must be smaller than or equal to 80.');
        }
        if (strlen($headline) < 1) {
            throw new \InvalidArgumentException('invalid length for $headline when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets lead
     * @return string
     */
    public function getLead()
    {
        return $this->container['lead'];
    }

    /**
     * Sets lead
     * @param string $lead Lead
     * @return $this
     */
    public function setLead($lead)
    {
        if (strlen($lead) > 500) {
            throw new \InvalidArgumentException('invalid length for $lead when calling ProgramReviewTypeReview., must be smaller than or equal to 500.');
        }
        if (strlen($lead) < 1) {
            throw new \InvalidArgumentException('invalid length for $lead when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['lead'] = $lead;

        return $this;
    }

    /**
     * Gets subfeatures
     * @return string
     */
    public function getSubfeatures()
    {
        return $this->container['subfeatures'];
    }

    /**
     * Sets subfeatures
     * @param string $subfeatures Subfeatures
     * @return $this
     */
    public function setSubfeatures($subfeatures)
    {
        if (strlen($subfeatures) > 50) {
            throw new \InvalidArgumentException('invalid length for $subfeatures when calling ProgramReviewTypeReview., must be smaller than or equal to 50.');
        }
        if (strlen($subfeatures) < 1) {
            throw new \InvalidArgumentException('invalid length for $subfeatures when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['subfeatures'] = $subfeatures;

        return $this;
    }

    /**
     * Gets features
     * @return string
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     * @param string $features Features
     * @return $this
     */
    public function setFeatures($features)
    {
        if (strlen($features) > 65535) {
            throw new \InvalidArgumentException('invalid length for $features when calling ProgramReviewTypeReview., must be smaller than or equal to 65535.');
        }
        if (strlen($features) < 1) {
            throw new \InvalidArgumentException('invalid length for $features when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets subusability
     * @return string
     */
    public function getSubusability()
    {
        return $this->container['subusability'];
    }

    /**
     * Sets subusability
     * @param string $subusability Subusability
     * @return $this
     */
    public function setSubusability($subusability)
    {
        if (strlen($subusability) > 50) {
            throw new \InvalidArgumentException('invalid length for $subusability when calling ProgramReviewTypeReview., must be smaller than or equal to 50.');
        }
        if (strlen($subusability) < 1) {
            throw new \InvalidArgumentException('invalid length for $subusability when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['subusability'] = $subusability;

        return $this;
    }

    /**
     * Gets usability
     * @return string
     */
    public function getUsability()
    {
        return $this->container['usability'];
    }

    /**
     * Sets usability
     * @param string $usability Usability
     * @return $this
     */
    public function setUsability($usability)
    {
        if (strlen($usability) > 65535) {
            throw new \InvalidArgumentException('invalid length for $usability when calling ProgramReviewTypeReview., must be smaller than or equal to 65535.');
        }
        if (strlen($usability) < 1) {
            throw new \InvalidArgumentException('invalid length for $usability when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['usability'] = $usability;

        return $this;
    }

    /**
     * Gets subconclusion
     * @return string
     */
    public function getSubconclusion()
    {
        return $this->container['subconclusion'];
    }

    /**
     * Sets subconclusion
     * @param string $subconclusion Subconclusion
     * @return $this
     */
    public function setSubconclusion($subconclusion)
    {
        if (strlen($subconclusion) > 50) {
            throw new \InvalidArgumentException('invalid length for $subconclusion when calling ProgramReviewTypeReview., must be smaller than or equal to 50.');
        }
        if (strlen($subconclusion) < 1) {
            throw new \InvalidArgumentException('invalid length for $subconclusion when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['subconclusion'] = $subconclusion;

        return $this;
    }

    /**
     * Gets conclusion
     * @return string
     */
    public function getConclusion()
    {
        return $this->container['conclusion'];
    }

    /**
     * Sets conclusion
     * @param string $conclusion Conclusion
     * @return $this
     */
    public function setConclusion($conclusion)
    {
        if (strlen($conclusion) > 65535) {
            throw new \InvalidArgumentException('invalid length for $conclusion when calling ProgramReviewTypeReview., must be smaller than or equal to 65535.');
        }
        if (strlen($conclusion) < 1) {
            throw new \InvalidArgumentException('invalid length for $conclusion when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['conclusion'] = $conclusion;

        return $this;
    }

    /**
     * Gets changes
     * @return string
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     * @param string $changes Version changes
     * @return $this
     */
    public function setChanges($changes)
    {
        if (strlen($changes) > 65535) {
            throw new \InvalidArgumentException('invalid length for $changes when calling ProgramReviewTypeReview., must be smaller than or equal to 65535.');
        }
        if (strlen($changes) < 1) {
            throw new \InvalidArgumentException('invalid length for $changes when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['changes'] = $changes;

        return $this;
    }

    /**
     * Gets extra
     * @return string
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     * @param string $extra Unrecognized parts from the review
     * @return $this
     */
    public function setExtra($extra)
    {
        if (strlen($extra) > 65535) {
            throw new \InvalidArgumentException('invalid length for $extra when calling ProgramReviewTypeReview., must be smaller than or equal to 65535.');
        }
        if (strlen($extra) < 1) {
            throw new \InvalidArgumentException('invalid length for $extra when calling ProgramReviewTypeReview., must be bigger than or equal to 1.');
        }
        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets pros
     * @return string[]
     */
    public function getPros()
    {
        return $this->container['pros'];
    }

    /**
     * Sets pros
     * @param string[] $pros Pros
     * @return $this
     */
    public function setPros($pros)
    {
        $this->container['pros'] = $pros;

        return $this;
    }

    /**
     * Gets cons
     * @return string[]
     */
    public function getCons()
    {
        return $this->container['cons'];
    }

    /**
     * Sets cons
     * @param string[] $cons Cons
     * @return $this
     */
    public function setCons($cons)
    {
        $this->container['cons'] = $cons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Softonic\CatalogApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Softonic\CatalogApiSdk\ObjectSerializer::sanitizeForSerialization($this));
    }
}
