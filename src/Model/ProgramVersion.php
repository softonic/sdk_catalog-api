<?php
/**
 * ProgramVersion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalog API
 *
 * API that allows to manage the programs catalog of Softonic
 *
 * OpenAPI spec version: 2.0.132-1072
 * Contact: team.platform@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Model;

use \ArrayAccess;

/**
 * ProgramVersion Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Softonic\CatalogApiSdk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProgramVersion implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProgramVersion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id_program' => 'string',
        'id_version' => 'string',
        'name' => 'string',
        'id_minimum_requirements_group' => 'string',
        'id_recommended_requirements_group' => 'string',
        'preversion' => 'string',
        'postversion' => 'string',
        'supported_formats' => 'string',
        'id_license' => 'string',
        'age' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id_program' => 'id_program',
        'id_version' => 'id_version',
        'name' => 'name',
        'id_minimum_requirements_group' => 'id_minimum_requirements_group',
        'id_recommended_requirements_group' => 'id_recommended_requirements_group',
        'preversion' => 'preversion',
        'postversion' => 'postversion',
        'supported_formats' => 'supported_formats',
        'id_license' => 'id_license',
        'age' => 'age'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id_program' => 'setIdProgram',
        'id_version' => 'setIdVersion',
        'name' => 'setName',
        'id_minimum_requirements_group' => 'setIdMinimumRequirementsGroup',
        'id_recommended_requirements_group' => 'setIdRecommendedRequirementsGroup',
        'preversion' => 'setPreversion',
        'postversion' => 'setPostversion',
        'supported_formats' => 'setSupportedFormats',
        'id_license' => 'setIdLicense',
        'age' => 'setAge'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id_program' => 'getIdProgram',
        'id_version' => 'getIdVersion',
        'name' => 'getName',
        'id_minimum_requirements_group' => 'getIdMinimumRequirementsGroup',
        'id_recommended_requirements_group' => 'getIdRecommendedRequirementsGroup',
        'preversion' => 'getPreversion',
        'postversion' => 'getPostversion',
        'supported_formats' => 'getSupportedFormats',
        'id_license' => 'getIdLicense',
        'age' => 'getAge'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_program'] = isset($data['id_program']) ? $data['id_program'] : null;
        $this->container['id_version'] = isset($data['id_version']) ? $data['id_version'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['id_minimum_requirements_group'] = isset($data['id_minimum_requirements_group']) ? $data['id_minimum_requirements_group'] : null;
        $this->container['id_recommended_requirements_group'] = isset($data['id_recommended_requirements_group']) ? $data['id_recommended_requirements_group'] : null;
        $this->container['preversion'] = isset($data['preversion']) ? $data['preversion'] : null;
        $this->container['postversion'] = isset($data['postversion']) ? $data['postversion'] : null;
        $this->container['supported_formats'] = isset($data['supported_formats']) ? $data['supported_formats'] : null;
        $this->container['id_license'] = isset($data['id_license']) ? $data['id_license'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id_program'] === null) {
            $invalid_properties[] = "'id_program' can't be null";
        }
        if ((strlen($this->container['id_program']) > 36)) {
            $invalid_properties[] = "invalid value for 'id_program', the character length must be smaller than or equal to 36.";
        }

        if ((strlen($this->container['id_program']) < 36)) {
            $invalid_properties[] = "invalid value for 'id_program', the character length must be bigger than or equal to 36.";
        }

        if ($this->container['id_version'] === null) {
            $invalid_properties[] = "'id_version' can't be null";
        }
        if ((strlen($this->container['id_version']) > 60)) {
            $invalid_properties[] = "invalid value for 'id_version', the character length must be smaller than or equal to 60.";
        }

        if ((strlen($this->container['id_version']) < 1)) {
            $invalid_properties[] = "invalid value for 'id_version', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 60)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 60.";
        }

        if ((strlen($this->container['name']) < 1)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['id_minimum_requirements_group']) && (strlen($this->container['id_minimum_requirements_group']) > 36)) {
            $invalid_properties[] = "invalid value for 'id_minimum_requirements_group', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['id_minimum_requirements_group']) && (strlen($this->container['id_minimum_requirements_group']) < 36)) {
            $invalid_properties[] = "invalid value for 'id_minimum_requirements_group', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['id_recommended_requirements_group']) && (strlen($this->container['id_recommended_requirements_group']) > 36)) {
            $invalid_properties[] = "invalid value for 'id_recommended_requirements_group', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['id_recommended_requirements_group']) && (strlen($this->container['id_recommended_requirements_group']) < 36)) {
            $invalid_properties[] = "invalid value for 'id_recommended_requirements_group', the character length must be bigger than or equal to 36.";
        }

        if (!is_null($this->container['preversion']) && (strlen($this->container['preversion']) > 255)) {
            $invalid_properties[] = "invalid value for 'preversion', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['preversion']) && (strlen($this->container['preversion']) < 1)) {
            $invalid_properties[] = "invalid value for 'preversion', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['postversion']) && (strlen($this->container['postversion']) > 255)) {
            $invalid_properties[] = "invalid value for 'postversion', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['postversion']) && (strlen($this->container['postversion']) < 1)) {
            $invalid_properties[] = "invalid value for 'postversion', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['supported_formats']) && (strlen($this->container['supported_formats']) > 1024)) {
            $invalid_properties[] = "invalid value for 'supported_formats', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['supported_formats']) && (strlen($this->container['supported_formats']) < 1)) {
            $invalid_properties[] = "invalid value for 'supported_formats', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['id_license']) && (strlen($this->container['id_license']) > 3)) {
            $invalid_properties[] = "invalid value for 'id_license', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['id_license']) && (strlen($this->container['id_license']) < 1)) {
            $invalid_properties[] = "invalid value for 'id_license', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['age']) && ($this->container['age'] > 21.0)) {
            $invalid_properties[] = "invalid value for 'age', must be smaller than or equal to 21.0.";
        }

        if (!is_null($this->container['age']) && ($this->container['age'] < 0.0)) {
            $invalid_properties[] = "invalid value for 'age', must be bigger than or equal to 0.0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id_program'] === null) {
            return false;
        }
        if (strlen($this->container['id_program']) > 36) {
            return false;
        }
        if (strlen($this->container['id_program']) < 36) {
            return false;
        }
        if ($this->container['id_version'] === null) {
            return false;
        }
        if (strlen($this->container['id_version']) > 60) {
            return false;
        }
        if (strlen($this->container['id_version']) < 1) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 60) {
            return false;
        }
        if (strlen($this->container['name']) < 1) {
            return false;
        }
        if (strlen($this->container['id_minimum_requirements_group']) > 36) {
            return false;
        }
        if (strlen($this->container['id_minimum_requirements_group']) < 36) {
            return false;
        }
        if (strlen($this->container['id_recommended_requirements_group']) > 36) {
            return false;
        }
        if (strlen($this->container['id_recommended_requirements_group']) < 36) {
            return false;
        }
        if (strlen($this->container['preversion']) > 255) {
            return false;
        }
        if (strlen($this->container['preversion']) < 1) {
            return false;
        }
        if (strlen($this->container['postversion']) > 255) {
            return false;
        }
        if (strlen($this->container['postversion']) < 1) {
            return false;
        }
        if (strlen($this->container['supported_formats']) > 1024) {
            return false;
        }
        if (strlen($this->container['supported_formats']) < 1) {
            return false;
        }
        if (strlen($this->container['id_license']) > 3) {
            return false;
        }
        if (strlen($this->container['id_license']) < 1) {
            return false;
        }
        if ($this->container['age'] > 21.0) {
            return false;
        }
        if ($this->container['age'] < 0.0) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_program
     * @return string
     */
    public function getIdProgram()
    {
        return $this->container['id_program'];
    }

    /**
     * Sets id_program
     * @param string $id_program Program UUID
     * @return $this
     */
    public function setIdProgram($id_program)
    {
        if (strlen($id_program) > 36) {
            throw new \InvalidArgumentException('invalid length for $id_program when calling ProgramVersion., must be smaller than or equal to 36.');
        }
        if (strlen($id_program) < 36) {
            throw new \InvalidArgumentException('invalid length for $id_program when calling ProgramVersion., must be bigger than or equal to 36.');
        }
        $this->container['id_program'] = $id_program;

        return $this;
    }

    /**
     * Gets id_version
     * @return string
     */
    public function getIdVersion()
    {
        return $this->container['id_version'];
    }

    /**
     * Sets id_version
     * @param string $id_version Program version identifier
     * @return $this
     */
    public function setIdVersion($id_version)
    {
        if (strlen($id_version) > 60) {
            throw new \InvalidArgumentException('invalid length for $id_version when calling ProgramVersion., must be smaller than or equal to 60.');
        }
        if (strlen($id_version) < 1) {
            throw new \InvalidArgumentException('invalid length for $id_version when calling ProgramVersion., must be bigger than or equal to 1.');
        }
        $this->container['id_version'] = $id_version;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Version name
     * @return $this
     */
    public function setName($name)
    {
        if (strlen($name) > 60) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProgramVersion., must be smaller than or equal to 60.');
        }
        if (strlen($name) < 1) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProgramVersion., must be bigger than or equal to 1.');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id_minimum_requirements_group
     * @return string
     */
    public function getIdMinimumRequirementsGroup()
    {
        return $this->container['id_minimum_requirements_group'];
    }

    /**
     * Sets id_minimum_requirements_group
     * @param string $id_minimum_requirements_group Minimum requirements group UUID
     * @return $this
     */
    public function setIdMinimumRequirementsGroup($id_minimum_requirements_group)
    {
        if (strlen($id_minimum_requirements_group) > 36) {
            throw new \InvalidArgumentException('invalid length for $id_minimum_requirements_group when calling ProgramVersion., must be smaller than or equal to 36.');
        }
        if (strlen($id_minimum_requirements_group) < 36) {
            throw new \InvalidArgumentException('invalid length for $id_minimum_requirements_group when calling ProgramVersion., must be bigger than or equal to 36.');
        }
        $this->container['id_minimum_requirements_group'] = $id_minimum_requirements_group;

        return $this;
    }

    /**
     * Gets id_recommended_requirements_group
     * @return string
     */
    public function getIdRecommendedRequirementsGroup()
    {
        return $this->container['id_recommended_requirements_group'];
    }

    /**
     * Sets id_recommended_requirements_group
     * @param string $id_recommended_requirements_group Recommended requirements group UUID
     * @return $this
     */
    public function setIdRecommendedRequirementsGroup($id_recommended_requirements_group)
    {
        if (strlen($id_recommended_requirements_group) > 36) {
            throw new \InvalidArgumentException('invalid length for $id_recommended_requirements_group when calling ProgramVersion., must be smaller than or equal to 36.');
        }
        if (strlen($id_recommended_requirements_group) < 36) {
            throw new \InvalidArgumentException('invalid length for $id_recommended_requirements_group when calling ProgramVersion., must be bigger than or equal to 36.');
        }
        $this->container['id_recommended_requirements_group'] = $id_recommended_requirements_group;

        return $this;
    }

    /**
     * Gets preversion
     * @return string
     */
    public function getPreversion()
    {
        return $this->container['preversion'];
    }

    /**
     * Sets preversion
     * @param string $preversion Preversion
     * @return $this
     */
    public function setPreversion($preversion)
    {
        if (strlen($preversion) > 255) {
            throw new \InvalidArgumentException('invalid length for $preversion when calling ProgramVersion., must be smaller than or equal to 255.');
        }
        if (strlen($preversion) < 1) {
            throw new \InvalidArgumentException('invalid length for $preversion when calling ProgramVersion., must be bigger than or equal to 1.');
        }
        $this->container['preversion'] = $preversion;

        return $this;
    }

    /**
     * Gets postversion
     * @return string
     */
    public function getPostversion()
    {
        return $this->container['postversion'];
    }

    /**
     * Sets postversion
     * @param string $postversion Postversion
     * @return $this
     */
    public function setPostversion($postversion)
    {
        if (strlen($postversion) > 255) {
            throw new \InvalidArgumentException('invalid length for $postversion when calling ProgramVersion., must be smaller than or equal to 255.');
        }
        if (strlen($postversion) < 1) {
            throw new \InvalidArgumentException('invalid length for $postversion when calling ProgramVersion., must be bigger than or equal to 1.');
        }
        $this->container['postversion'] = $postversion;

        return $this;
    }

    /**
     * Gets supported_formats
     * @return string
     */
    public function getSupportedFormats()
    {
        return $this->container['supported_formats'];
    }

    /**
     * Sets supported_formats
     * @param string $supported_formats Supported formats
     * @return $this
     */
    public function setSupportedFormats($supported_formats)
    {
        if (strlen($supported_formats) > 1024) {
            throw new \InvalidArgumentException('invalid length for $supported_formats when calling ProgramVersion., must be smaller than or equal to 1024.');
        }
        if (strlen($supported_formats) < 1) {
            throw new \InvalidArgumentException('invalid length for $supported_formats when calling ProgramVersion., must be bigger than or equal to 1.');
        }
        $this->container['supported_formats'] = $supported_formats;

        return $this;
    }

    /**
     * Gets id_license
     * @return string
     */
    public function getIdLicense()
    {
        return $this->container['id_license'];
    }

    /**
     * Sets id_license
     * @param string $id_license Licenses acronym
     * @return $this
     */
    public function setIdLicense($id_license)
    {
        if (strlen($id_license) > 3) {
            throw new \InvalidArgumentException('invalid length for $id_license when calling ProgramVersion., must be smaller than or equal to 3.');
        }
        if (strlen($id_license) < 1) {
            throw new \InvalidArgumentException('invalid length for $id_license when calling ProgramVersion., must be bigger than or equal to 1.');
        }
        $this->container['id_license'] = $id_license;

        return $this;
    }

    /**
     * Gets age
     * @return int
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     * @param int $age Age
     * @return $this
     */
    public function setAge($age)
    {

        if ($age > 21.0) {
            throw new \InvalidArgumentException('invalid value for $age when calling ProgramVersion., must be smaller than or equal to 21.0.');
        }
        if ($age < 0.0) {
            throw new \InvalidArgumentException('invalid value for $age when calling ProgramVersion., must be bigger than or equal to 0.0.');
        }
        $this->container['age'] = $age;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Softonic\CatalogApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Softonic\CatalogApiSdk\ObjectSerializer::sanitizeForSerialization($this));
    }
}


