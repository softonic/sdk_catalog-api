<?php
/**
 * ProgramVersion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: 2.0.17-83
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Model;

use \ArrayAccess;

/**
 * ProgramVersion Class Doc Comment
 *
 * @category    Class
 * @package     Softonic\CatalogApiSdk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProgramVersion implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProgramVersion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id_program' => 'string',
        'id_version' => 'string',
        'rating' => 'int',
        'id_minimum_requirements' => 'string',
        'id_recommended_requirements' => 'string',
        'preversion' => 'string',
        'version' => 'string',
        'subversion' => 'string',
        'supported_formats' => 'string',
        'id_license' => 'string',
        'id_platform_version' => 'string',
        'id_platform_characteristics' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id_program' => 'id_program',
        'id_version' => 'id_version',
        'rating' => 'rating',
        'id_minimum_requirements' => 'id_minimum_requirements',
        'id_recommended_requirements' => 'id_recommended_requirements',
        'preversion' => 'preversion',
        'version' => 'version',
        'subversion' => 'subversion',
        'supported_formats' => 'supported_formats',
        'id_license' => 'id_license',
        'id_platform_version' => 'id_platform_version',
        'id_platform_characteristics' => 'id_platform_characteristics'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id_program' => 'setIdProgram',
        'id_version' => 'setIdVersion',
        'rating' => 'setRating',
        'id_minimum_requirements' => 'setIdMinimumRequirements',
        'id_recommended_requirements' => 'setIdRecommendedRequirements',
        'preversion' => 'setPreversion',
        'version' => 'setVersion',
        'subversion' => 'setSubversion',
        'supported_formats' => 'setSupportedFormats',
        'id_license' => 'setIdLicense',
        'id_platform_version' => 'setIdPlatformVersion',
        'id_platform_characteristics' => 'setIdPlatformCharacteristics'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id_program' => 'getIdProgram',
        'id_version' => 'getIdVersion',
        'rating' => 'getRating',
        'id_minimum_requirements' => 'getIdMinimumRequirements',
        'id_recommended_requirements' => 'getIdRecommendedRequirements',
        'preversion' => 'getPreversion',
        'version' => 'getVersion',
        'subversion' => 'getSubversion',
        'supported_formats' => 'getSupportedFormats',
        'id_license' => 'getIdLicense',
        'id_platform_version' => 'getIdPlatformVersion',
        'id_platform_characteristics' => 'getIdPlatformCharacteristics'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_program'] = isset($data['id_program']) ? $data['id_program'] : null;
        $this->container['id_version'] = isset($data['id_version']) ? $data['id_version'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['id_minimum_requirements'] = isset($data['id_minimum_requirements']) ? $data['id_minimum_requirements'] : null;
        $this->container['id_recommended_requirements'] = isset($data['id_recommended_requirements']) ? $data['id_recommended_requirements'] : null;
        $this->container['preversion'] = isset($data['preversion']) ? $data['preversion'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['subversion'] = isset($data['subversion']) ? $data['subversion'] : null;
        $this->container['supported_formats'] = isset($data['supported_formats']) ? $data['supported_formats'] : null;
        $this->container['id_license'] = isset($data['id_license']) ? $data['id_license'] : null;
        $this->container['id_platform_version'] = isset($data['id_platform_version']) ? $data['id_platform_version'] : null;
        $this->container['id_platform_characteristics'] = isset($data['id_platform_characteristics']) ? $data['id_platform_characteristics'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id_program'] === null) {
            $invalid_properties[] = "'id_program' can't be null";
        }
        if ($this->container['id_version'] === null) {
            $invalid_properties[] = "'id_version' can't be null";
        }
        if ($this->container['id_minimum_requirements'] === null) {
            $invalid_properties[] = "'id_minimum_requirements' can't be null";
        }
        if ($this->container['id_recommended_requirements'] === null) {
            $invalid_properties[] = "'id_recommended_requirements' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalid_properties[] = "'version' can't be null";
        }
        if ($this->container['id_license'] === null) {
            $invalid_properties[] = "'id_license' can't be null";
        }
        if ($this->container['id_platform_version'] === null) {
            $invalid_properties[] = "'id_platform_version' can't be null";
        }
        if ($this->container['id_platform_characteristics'] === null) {
            $invalid_properties[] = "'id_platform_characteristics' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id_program'] === null) {
            return false;
        }
        if ($this->container['id_version'] === null) {
            return false;
        }
        if ($this->container['id_minimum_requirements'] === null) {
            return false;
        }
        if ($this->container['id_recommended_requirements'] === null) {
            return false;
        }
        if ($this->container['version'] === null) {
            return false;
        }
        if ($this->container['id_license'] === null) {
            return false;
        }
        if ($this->container['id_platform_version'] === null) {
            return false;
        }
        if ($this->container['id_platform_characteristics'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_program
     * @return string
     */
    public function getIdProgram()
    {
        return $this->container['id_program'];
    }

    /**
     * Sets id_program
     * @param string $id_program Program UUID
     * @return $this
     */
    public function setIdProgram($id_program)
    {
        $this->container['id_program'] = $id_program;

        return $this;
    }

    /**
     * Gets id_version
     * @return string
     */
    public function getIdVersion()
    {
        return $this->container['id_version'];
    }

    /**
     * Sets id_version
     * @param string $id_version Version UUID
     * @return $this
     */
    public function setIdVersion($id_version)
    {
        $this->container['id_version'] = $id_version;

        return $this;
    }

    /**
     * Gets rating
     * @return int
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     * @param int $rating 
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets id_minimum_requirements
     * @return string
     */
    public function getIdMinimumRequirements()
    {
        return $this->container['id_minimum_requirements'];
    }

    /**
     * Sets id_minimum_requirements
     * @param string $id_minimum_requirements Minimun requirements UUID
     * @return $this
     */
    public function setIdMinimumRequirements($id_minimum_requirements)
    {
        $this->container['id_minimum_requirements'] = $id_minimum_requirements;

        return $this;
    }

    /**
     * Gets id_recommended_requirements
     * @return string
     */
    public function getIdRecommendedRequirements()
    {
        return $this->container['id_recommended_requirements'];
    }

    /**
     * Sets id_recommended_requirements
     * @param string $id_recommended_requirements Recommended requirements UUID
     * @return $this
     */
    public function setIdRecommendedRequirements($id_recommended_requirements)
    {
        $this->container['id_recommended_requirements'] = $id_recommended_requirements;

        return $this;
    }

    /**
     * Gets preversion
     * @return string
     */
    public function getPreversion()
    {
        return $this->container['preversion'];
    }

    /**
     * Sets preversion
     * @param string $preversion Preversion
     * @return $this
     */
    public function setPreversion($preversion)
    {
        $this->container['preversion'] = $preversion;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version Version
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets subversion
     * @return string
     */
    public function getSubversion()
    {
        return $this->container['subversion'];
    }

    /**
     * Sets subversion
     * @param string $subversion Subversion
     * @return $this
     */
    public function setSubversion($subversion)
    {
        $this->container['subversion'] = $subversion;

        return $this;
    }

    /**
     * Gets supported_formats
     * @return string
     */
    public function getSupportedFormats()
    {
        return $this->container['supported_formats'];
    }

    /**
     * Sets supported_formats
     * @param string $supported_formats Supported formats
     * @return $this
     */
    public function setSupportedFormats($supported_formats)
    {
        $this->container['supported_formats'] = $supported_formats;

        return $this;
    }

    /**
     * Gets id_license
     * @return string
     */
    public function getIdLicense()
    {
        return $this->container['id_license'];
    }

    /**
     * Sets id_license
     * @param string $id_license Licenses identifier
     * @return $this
     */
    public function setIdLicense($id_license)
    {
        $this->container['id_license'] = $id_license;

        return $this;
    }

    /**
     * Gets id_platform_version
     * @return string
     */
    public function getIdPlatformVersion()
    {
        return $this->container['id_platform_version'];
    }

    /**
     * Sets id_platform_version
     * @param string $id_platform_version Platform versions UUID
     * @return $this
     */
    public function setIdPlatformVersion($id_platform_version)
    {
        $this->container['id_platform_version'] = $id_platform_version;

        return $this;
    }

    /**
     * Gets id_platform_characteristics
     * @return string
     */
    public function getIdPlatformCharacteristics()
    {
        return $this->container['id_platform_characteristics'];
    }

    /**
     * Sets id_platform_characteristics
     * @param string $id_platform_characteristics Platform characteristics UUID
     * @return $this
     */
    public function setIdPlatformCharacteristics($id_platform_characteristics)
    {
        $this->container['id_platform_characteristics'] = $id_platform_characteristics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Softonic\CatalogApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Softonic\CatalogApiSdk\ObjectSerializer::sanitizeForSerialization($this));
    }
}
