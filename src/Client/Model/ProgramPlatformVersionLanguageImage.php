<?php
/**
 * ProgramPlatformVersionLanguageImage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Catalog API
 *
 * This API is the responsible to store all program related information.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: javier.eurrutia@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Client\Model;

use \ArrayAccess;
use \JsonSerializable;
use \Softonic\CatalogApiSdk\ObjectSerializer;

/**
 * ProgramPlatformVersionLanguageImage Class Doc Comment
 *
 * @category Class
 * @description Program platform version language image model
 * @package  Softonic\CatalogApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramPlatformVersionLanguageImage implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    const GET_ALL_ATTRIBUTES = true;

    const GET_SET_ATTRIBUTES = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProgramPlatformVersionLanguageImage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_program' => 'string',
'id_platform' => 'string',
'id_version' => 'string',
'id_language' => 'string',
'id_image' => 'string',
'path' => 'string',
'filename' => 'string',
'type' => 'string',
'width' => 'int',
'height' => 'int',
'priority' => 'int',
'caption' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_program' => 'uuid',
'id_platform' => null,
'id_version' => 'versionSlug',
'id_language' => null,
'id_image' => null,
'path' => null,
'filename' => null,
'type' => null,
'width' => null,
'height' => null,
'priority' => null,
'caption' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_program' => 'id_program',
'id_platform' => 'id_platform',
'id_version' => 'id_version',
'id_language' => 'id_language',
'id_image' => 'id_image',
'path' => 'path',
'filename' => 'filename',
'type' => 'type',
'width' => 'width',
'height' => 'height',
'priority' => 'priority',
'caption' => 'caption'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_program' => 'setIdProgram',
'id_platform' => 'setIdPlatform',
'id_version' => 'setIdVersion',
'id_language' => 'setIdLanguage',
'id_image' => 'setIdImage',
'path' => 'setPath',
'filename' => 'setFilename',
'type' => 'setType',
'width' => 'setWidth',
'height' => 'setHeight',
'priority' => 'setPriority',
'caption' => 'setCaption'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_program' => 'getIdProgram',
'id_platform' => 'getIdPlatform',
'id_version' => 'getIdVersion',
'id_language' => 'getIdLanguage',
'id_image' => 'getIdImage',
'path' => 'getPath',
'filename' => 'getFilename',
'type' => 'getType',
'width' => 'getWidth',
'height' => 'getHeight',
'priority' => 'getPriority',
'caption' => 'getCaption'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_ICON = 'icon';
const TYPE_SCREENSHOT = 'screenshot';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ICON,
self::TYPE_SCREENSHOT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = [])
    {
        array_key_exists('id_program', $data) && $this->container['id_program'] = $data['id_program'];
        array_key_exists('id_platform', $data) && $this->container['id_platform'] = $data['id_platform'];
        array_key_exists('id_version', $data) && $this->container['id_version'] = $data['id_version'];
        array_key_exists('id_language', $data) && $this->container['id_language'] = $data['id_language'];
        array_key_exists('id_image', $data) && $this->container['id_image'] = $data['id_image'];
        array_key_exists('path', $data) && $this->container['path'] = $data['path'];
        array_key_exists('filename', $data) && $this->container['filename'] = $data['filename'];
        array_key_exists('type', $data) && $this->container['type'] = $data['type'];
        array_key_exists('width', $data) && $this->container['width'] = $data['width'];
        array_key_exists('height', $data) && $this->container['height'] = $data['height'];
        array_key_exists('priority', $data) && $this->container['priority'] = $data['priority'];
        array_key_exists('caption', $data) && $this->container['caption'] = $data['caption'];
    }

    /**
     * Returns true if all attributes are set. False otherwise.
     *
     * @return bool
     */
    public function hasAllAttributesSet()
    {
        return count($this->container) === count(self::$attributeMap);
    }

    /**
     * Show all the invalid unrequired properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidUnrequiredProperties()
    {
        $invalidProperties = [];
        if (
            array_key_exists('id_image', $this->container)
            && $this->container['id_image'] !== null
            && (strlen($this->container['id_image']) > 40)
        ) {
            $invalidProperties[] = "invalid value for 'id_image', the character length must be smaller than or equal to 40.";
        }

        if (
            array_key_exists('id_image', $this->container)
            && $this->container['id_image'] !== null
            && (strlen($this->container['id_image']) < 40)
        ) {
            $invalidProperties[] = "invalid value for 'id_image', the character length must be bigger than or equal to 40.";
        }

        if (
            array_key_exists('path', $this->container)
            && $this->container['path'] !== null
            && (strlen($this->container['path']) > 255)
        ) {
            $invalidProperties[] = "invalid value for 'path', the character length must be smaller than or equal to 255.";
        }

        if (
            array_key_exists('path', $this->container)
            && $this->container['path'] !== null
            && (strlen($this->container['path']) < 1)
        ) {
            $invalidProperties[] = "invalid value for 'path', the character length must be bigger than or equal to 1.";
        }

        if (
            array_key_exists('filename', $this->container)
            && $this->container['filename'] !== null
            && (strlen($this->container['filename']) > 255)
        ) {
            $invalidProperties[] = "invalid value for 'filename', the character length must be smaller than or equal to 255.";
        }

        if (
            array_key_exists('filename', $this->container)
            && $this->container['filename'] !== null
            && (strlen($this->container['filename']) < 1)
        ) {
            $invalidProperties[] = "invalid value for 'filename', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (
            array_key_exists('type', $this->container)
            && $this->container['type'] !== null
            && !in_array($this->container['type'], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (
            array_key_exists('priority', $this->container)
            && $this->container['priority'] !== null
            && ($this->container['priority'] > 255)
        ) {
            $invalidProperties[] = "invalid value for 'priority', must be smaller than or equal to 255.";
        }

        if (
            array_key_exists('priority', $this->container)
            && $this->container['priority'] !== null
            && ($this->container['priority'] < 0)
        ) {
            $invalidProperties[] = "invalid value for 'priority', must be bigger than or equal to 0.";
        }

        if (
            array_key_exists('caption', $this->container)
            && $this->container['caption'] !== null
            && (strlen($this->container['caption']) > 255)
        ) {
            $invalidProperties[] = "invalid value for 'caption', the character length must be smaller than or equal to 255.";
        }

        if (
            array_key_exists('caption', $this->container)
            && $this->container['caption'] !== null
            && (strlen($this->container['caption']) < 1)
        ) {
            $invalidProperties[] = "invalid value for 'caption', the character length must be bigger than or equal to 1.";
        }

        
        return $invalidProperties;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $invalidProperties = array_merge($invalidProperties, $this->listInvalidUnrequiredProperties());

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model ensuring the required ones are set
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function validProperties()
    {
        return count($this->listInvalidUnrequiredProperties()) === 0;
    }


    /**
     * Gets id_program
     *
     * @return string
     */
    public function getIdProgram()
    {
        return array_key_exists('id_program', $this->container) ? $this->container['id_program'] :
null;
    }

    /**
     * Sets id_program
     *
     * @param string $id_program Program ID
     *
     * @return $this
     */
    public function setIdProgram($id_program)
    {
        $this->container['id_program'] = $id_program;

        return $this;
    }

    /**
     * Gets id_platform
     *
     * @return string
     */
    public function getIdPlatform()
    {
        return array_key_exists('id_platform', $this->container) ? $this->container['id_platform'] :
null;
    }

    /**
     * Sets id_platform
     *
     * @param string $id_platform Platform ID
     *
     * @return $this
     */
    public function setIdPlatform($id_platform)
    {
        $this->container['id_platform'] = $id_platform;

        return $this;
    }

    /**
     * Gets id_version
     *
     * @return string
     */
    public function getIdVersion()
    {
        return array_key_exists('id_version', $this->container) ? $this->container['id_version'] :
null;
    }

    /**
     * Sets id_version
     *
     * @param string $id_version Version ID
     *
     * @return $this
     */
    public function setIdVersion($id_version)
    {
        $this->container['id_version'] = $id_version;

        return $this;
    }

    /**
     * Gets id_language
     *
     * @return string
     */
    public function getIdLanguage()
    {
        return array_key_exists('id_language', $this->container) ? $this->container['id_language'] :
null;
    }

    /**
     * Sets id_language
     *
     * @param string $id_language Language ID
     *
     * @return $this
     */
    public function setIdLanguage($id_language)
    {
        $this->container['id_language'] = $id_language;

        return $this;
    }

    /**
     * Gets id_image
     *
     * @return string
     */
    public function getIdImage()
    {
        return array_key_exists('id_image', $this->container) ? $this->container['id_image'] :
null;
    }

    /**
     * Sets id_image
     *
     * @param string $id_image Image ID in SHA1-Hash format
     *
     * @return $this
     */
    public function setIdImage($id_image)
    {
        $this->container['id_image'] = $id_image;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return array_key_exists('path', $this->container) ? $this->container['path'] :
null;
    }

    /**
     * Sets path
     *
     * @param string $path Image path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return array_key_exists('filename', $this->container) ? $this->container['filename'] :
null;
    }

    /**
     * Sets filename
     *
     * @param string $filename Image filename
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return array_key_exists('type', $this->container) ? $this->container['type'] :
null;
    }

    /**
     * Sets type
     *
     * @param string $type Image type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return array_key_exists('width', $this->container) ? $this->container['width'] :
null;
    }

    /**
     * Sets width
     *
     * @param int $width Image width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return array_key_exists('height', $this->container) ? $this->container['height'] :
null;
    }

    /**
     * Sets height
     *
     * @param int $height Image height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return array_key_exists('priority', $this->container) ? $this->container['priority'] :
null;
    }

    /**
     * Sets priority
     *
     * @param int $priority Priority used to order the images
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string
     */
    public function getCaption()
    {
        return array_key_exists('caption', $this->container) ? $this->container['caption'] :
null;
    }

    /**
     * Sets caption
     *
     * @param string $caption Small text shown usually below the image
     *
     * @return $this
     */
    public function setCaption($caption)
    {
        $this->container['caption'] = $caption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return array_key_exists($offset, $this->container);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Returns data which can be serialized by json_encode()
     *
     * @return mixed[]
     */
    public function jsonSerialize()
    {
        return $this->container;
    }

     /**
     * Returns data as array.
     *
     * @param bool $getAllAttributes Should convert with all attributes or just the set ones?
     *
     * @return array
     */
    public function toArray($getAllAttributes = self::GET_SET_ATTRIBUTES)
    {
        if (!$getAllAttributes) {
            return $this->container;
        }

        $data = [];
        $data['id_program'] = $this->getIdProgram();
        $data['id_platform'] = $this->getIdPlatform();
        $data['id_version'] = $this->getIdVersion();
        $data['id_language'] = $this->getIdLanguage();
        $data['id_image'] = $this->getIdImage();
        $data['path'] = $this->getPath();
        $data['filename'] = $this->getFilename();
        $data['type'] = $this->getType();
        $data['width'] = $this->getWidth();
        $data['height'] = $this->getHeight();
        $data['priority'] = $this->getPriority();
        $data['caption'] = $this->getCaption();

        return $data;
    }
}
