<?php
/**
 * ProgramPlatformReviewtypeReview
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Catalog API
 *
 * This API is the responsible to store all program related information.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: javier.eurrutia@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Client\Model;

use \ArrayAccess;
use \JsonSerializable;
use \Softonic\CatalogApiSdk\ObjectSerializer;

/**
 * ProgramPlatformReviewtypeReview Class Doc Comment
 *
 * @category Class
 * @description Program platform reviewtype review model
 * @package  Softonic\CatalogApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramPlatformReviewtypeReview implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    const GET_ALL_ATTRIBUTES = true;

    const GET_SET_ATTRIBUTES = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProgramPlatformReviewtypeReview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_program' => 'string',
'id_platform' => 'string',
'id_reviewtype' => 'string',
'id_review' => 'string',
'type' => 'string',
'source' => 'string',
'id_editor' => 'int',
'rating' => 'int',
'headline' => 'string',
'lead' => 'string',
'body' => 'string',
'conclusion' => 'string',
'changes' => 'string',
'extra' => 'string',
'pros' => 'string[]',
'cons' => 'string[]',
'updated_at' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_program' => 'uuid',
'id_platform' => null,
'id_reviewtype' => null,
'id_review' => 'uuid',
'type' => null,
'source' => null,
'id_editor' => null,
'rating' => 'between(0, 10)',
'headline' => null,
'lead' => null,
'body' => null,
'conclusion' => null,
'changes' => null,
'extra' => null,
'pros' => null,
'cons' => null,
'updated_at' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_program' => 'id_program',
'id_platform' => 'id_platform',
'id_reviewtype' => 'id_reviewtype',
'id_review' => 'id_review',
'type' => 'type',
'source' => 'source',
'id_editor' => 'id_editor',
'rating' => 'rating',
'headline' => 'headline',
'lead' => 'lead',
'body' => 'body',
'conclusion' => 'conclusion',
'changes' => 'changes',
'extra' => 'extra',
'pros' => 'pros',
'cons' => 'cons',
'updated_at' => 'updated_at'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_program' => 'setIdProgram',
'id_platform' => 'setIdPlatform',
'id_reviewtype' => 'setIdReviewtype',
'id_review' => 'setIdReview',
'type' => 'setType',
'source' => 'setSource',
'id_editor' => 'setIdEditor',
'rating' => 'setRating',
'headline' => 'setHeadline',
'lead' => 'setLead',
'body' => 'setBody',
'conclusion' => 'setConclusion',
'changes' => 'setChanges',
'extra' => 'setExtra',
'pros' => 'setPros',
'cons' => 'setCons',
'updated_at' => 'setUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_program' => 'getIdProgram',
'id_platform' => 'getIdPlatform',
'id_reviewtype' => 'getIdReviewtype',
'id_review' => 'getIdReview',
'type' => 'getType',
'source' => 'getSource',
'id_editor' => 'getIdEditor',
'rating' => 'getRating',
'headline' => 'getHeadline',
'lead' => 'getLead',
'body' => 'getBody',
'conclusion' => 'getConclusion',
'changes' => 'getChanges',
'extra' => 'getExtra',
'pros' => 'getPros',
'cons' => 'getCons',
'updated_at' => 'getUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_STANDARD = 'standard';
const TYPE_CORE = 'core';
const TYPE_THIN = 'thin';
const TYPE_NO_REVIEW = 'no-review';
const TYPE_SEO_REVIEW = 'seo-review';
const SOURCE_ROBOTINA = 'robotina';
const SOURCE_ROBOTINA_TRANSLATED = 'robotina-translated';
const SOURCE_TEXTBROKER = 'textbroker';
const SOURCE_TEXTBROKER_TRANSLATED = 'textbroker-translated';
const SOURCE_MANILA = 'manila';
const SOURCE_MANILA_TRANSLATED = 'manila-translated';
const SOURCE_CURATED = 'curated';
const SOURCE_CURATED_TRANSLATED = 'curated-translated';
const SOURCE_TRANSLATED = 'translated';
const SOURCE_ORIGINAL = 'original';
const SOURCE_FREELANCER = 'freelancer';
const SOURCE_FREELANCER_TRANSLATED = 'freelancer-translated';
const SOURCE_CAPTAIN_WORDS = 'captain-words';
const SOURCE_CAPTAIN_WORDS_TRANSLATED = 'captain-words-translated';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_STANDARD,
self::TYPE_CORE,
self::TYPE_THIN,
self::TYPE_NO_REVIEW,
self::TYPE_SEO_REVIEW,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_ROBOTINA,
self::SOURCE_ROBOTINA_TRANSLATED,
self::SOURCE_TEXTBROKER,
self::SOURCE_TEXTBROKER_TRANSLATED,
self::SOURCE_MANILA,
self::SOURCE_MANILA_TRANSLATED,
self::SOURCE_CURATED,
self::SOURCE_CURATED_TRANSLATED,
self::SOURCE_TRANSLATED,
self::SOURCE_ORIGINAL,
self::SOURCE_FREELANCER,
self::SOURCE_FREELANCER_TRANSLATED,
self::SOURCE_CAPTAIN_WORDS,
self::SOURCE_CAPTAIN_WORDS_TRANSLATED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = [])
    {
        array_key_exists('id_program', $data) && $this->container['id_program'] = $data['id_program'];
        array_key_exists('id_platform', $data) && $this->container['id_platform'] = $data['id_platform'];
        array_key_exists('id_reviewtype', $data) && $this->container['id_reviewtype'] = $data['id_reviewtype'];
        array_key_exists('id_review', $data) && $this->container['id_review'] = $data['id_review'];
        array_key_exists('type', $data) && $this->container['type'] = $data['type'];
        array_key_exists('source', $data) && $this->container['source'] = $data['source'];
        array_key_exists('id_editor', $data) && $this->container['id_editor'] = $data['id_editor'];
        array_key_exists('rating', $data) && $this->container['rating'] = $data['rating'];
        array_key_exists('headline', $data) && $this->container['headline'] = $data['headline'];
        array_key_exists('lead', $data) && $this->container['lead'] = $data['lead'];
        array_key_exists('body', $data) && $this->container['body'] = $data['body'];
        array_key_exists('conclusion', $data) && $this->container['conclusion'] = $data['conclusion'];
        array_key_exists('changes', $data) && $this->container['changes'] = $data['changes'];
        array_key_exists('extra', $data) && $this->container['extra'] = $data['extra'];
        array_key_exists('pros', $data) && $this->container['pros'] = $data['pros'];
        array_key_exists('cons', $data) && $this->container['cons'] = $data['cons'];
        array_key_exists('updated_at', $data) && $this->container['updated_at'] = $data['updated_at'];
    }

    /**
     * Returns true if all attributes are set. False otherwise.
     *
     * @return bool
     */
    public function hasAllAttributesSet()
    {
        return count($this->container) === count(self::$attributeMap);
    }

    /**
     * Show all the invalid unrequired properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidUnrequiredProperties()
    {
        $invalidProperties = [];
        $allowedValues = $this->getTypeAllowableValues();
        if (
            array_key_exists('type', $this->container)
            && $this->container['type'] !== null
            && !in_array($this->container['type'], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (
            array_key_exists('source', $this->container)
            && $this->container['source'] !== null
            && !in_array($this->container['source'], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (
            array_key_exists('headline', $this->container)
            && $this->container['headline'] !== null
            && (strlen($this->container['headline']) > 2000)
        ) {
            $invalidProperties[] = "invalid value for 'headline', the character length must be smaller than or equal to 2000.";
        }

        if (
            array_key_exists('headline', $this->container)
            && $this->container['headline'] !== null
            && (strlen($this->container['headline']) < 1)
        ) {
            $invalidProperties[] = "invalid value for 'headline', the character length must be bigger than or equal to 1.";
        }

        if (
            array_key_exists('lead', $this->container)
            && $this->container['lead'] !== null
            && (strlen($this->container['lead']) > 2000)
        ) {
            $invalidProperties[] = "invalid value for 'lead', the character length must be smaller than or equal to 2000.";
        }

        if (
            array_key_exists('lead', $this->container)
            && $this->container['lead'] !== null
            && (strlen($this->container['lead']) < 1)
        ) {
            $invalidProperties[] = "invalid value for 'lead', the character length must be bigger than or equal to 1.";
        }

        if (
            array_key_exists('body', $this->container)
            && $this->container['body'] !== null
            && (strlen($this->container['body']) > 65535)
        ) {
            $invalidProperties[] = "invalid value for 'body', the character length must be smaller than or equal to 65535.";
        }

        if (
            array_key_exists('body', $this->container)
            && $this->container['body'] !== null
            && (strlen($this->container['body']) < 1)
        ) {
            $invalidProperties[] = "invalid value for 'body', the character length must be bigger than or equal to 1.";
        }

        if (
            array_key_exists('conclusion', $this->container)
            && $this->container['conclusion'] !== null
            && (strlen($this->container['conclusion']) > 4000)
        ) {
            $invalidProperties[] = "invalid value for 'conclusion', the character length must be smaller than or equal to 4000.";
        }

        if (
            array_key_exists('conclusion', $this->container)
            && $this->container['conclusion'] !== null
            && (strlen($this->container['conclusion']) < 1)
        ) {
            $invalidProperties[] = "invalid value for 'conclusion', the character length must be bigger than or equal to 1.";
        }

        if (
            array_key_exists('changes', $this->container)
            && $this->container['changes'] !== null
            && (strlen($this->container['changes']) > 10500)
        ) {
            $invalidProperties[] = "invalid value for 'changes', the character length must be smaller than or equal to 10500.";
        }

        if (
            array_key_exists('changes', $this->container)
            && $this->container['changes'] !== null
            && (strlen($this->container['changes']) < 1)
        ) {
            $invalidProperties[] = "invalid value for 'changes', the character length must be bigger than or equal to 1.";
        }

        if (
            array_key_exists('extra', $this->container)
            && $this->container['extra'] !== null
            && (strlen($this->container['extra']) > 65535)
        ) {
            $invalidProperties[] = "invalid value for 'extra', the character length must be smaller than or equal to 65535.";
        }

        if (
            array_key_exists('extra', $this->container)
            && $this->container['extra'] !== null
            && (strlen($this->container['extra']) < 1)
        ) {
            $invalidProperties[] = "invalid value for 'extra', the character length must be bigger than or equal to 1.";
        }

        
        return $invalidProperties;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $invalidProperties = array_merge($invalidProperties, $this->listInvalidUnrequiredProperties());

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model ensuring the required ones are set
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function validProperties()
    {
        return count($this->listInvalidUnrequiredProperties()) === 0;
    }


    /**
     * Gets id_program
     *
     * @return string
     */
    public function getIdProgram()
    {
        return array_key_exists('id_program', $this->container) ? $this->container['id_program'] :
null;
    }

    /**
     * Sets id_program
     *
     * @param string $id_program Program ID
     *
     * @return $this
     */
    public function setIdProgram($id_program)
    {
        $this->container['id_program'] = $id_program;

        return $this;
    }

    /**
     * Gets id_platform
     *
     * @return string
     */
    public function getIdPlatform()
    {
        return array_key_exists('id_platform', $this->container) ? $this->container['id_platform'] :
null;
    }

    /**
     * Sets id_platform
     *
     * @param string $id_platform Platform ID
     *
     * @return $this
     */
    public function setIdPlatform($id_platform)
    {
        $this->container['id_platform'] = $id_platform;

        return $this;
    }

    /**
     * Gets id_reviewtype
     *
     * @return string
     */
    public function getIdReviewtype()
    {
        return array_key_exists('id_reviewtype', $this->container) ? $this->container['id_reviewtype'] :
null;
    }

    /**
     * Sets id_reviewtype
     *
     * @param string $id_reviewtype Review type ID
     *
     * @return $this
     */
    public function setIdReviewtype($id_reviewtype)
    {
        $this->container['id_reviewtype'] = $id_reviewtype;

        return $this;
    }

    /**
     * Gets id_review
     *
     * @return string
     */
    public function getIdReview()
    {
        return array_key_exists('id_review', $this->container) ? $this->container['id_review'] :
null;
    }

    /**
     * Sets id_review
     *
     * @param string $id_review Review ID
     *
     * @return $this
     */
    public function setIdReview($id_review)
    {
        $this->container['id_review'] = $id_review;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return array_key_exists('type', $this->container) ? $this->container['type'] :
null;
    }

    /**
     * Sets type
     *
     * @param string $type Review type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return array_key_exists('source', $this->container) ? $this->container['source'] :
null;
    }

    /**
     * Sets source
     *
     * @param string $source Who created the review
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets id_editor
     *
     * @return int
     */
    public function getIdEditor()
    {
        return array_key_exists('id_editor', $this->container) ? $this->container['id_editor'] :
null;
    }

    /**
     * Sets id_editor
     *
     * @param int $id_editor Editor ID
     *
     * @return $this
     */
    public function setIdEditor($id_editor)
    {
        $this->container['id_editor'] = $id_editor;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return int
     */
    public function getRating()
    {
        return array_key_exists('rating', $this->container) ? $this->container['rating'] :
null;
    }

    /**
     * Sets rating
     *
     * @param int $rating Program rating
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets headline
     *
     * @return string
     */
    public function getHeadline()
    {
        return array_key_exists('headline', $this->container) ? $this->container['headline'] :
null;
    }

    /**
     * Sets headline
     *
     * @param string $headline Headline
     *
     * @return $this
     */
    public function setHeadline($headline)
    {
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets lead
     *
     * @return string
     */
    public function getLead()
    {
        return array_key_exists('lead', $this->container) ? $this->container['lead'] :
null;
    }

    /**
     * Sets lead
     *
     * @param string $lead Lead
     *
     * @return $this
     */
    public function setLead($lead)
    {
        $this->container['lead'] = $lead;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return array_key_exists('body', $this->container) ? $this->container['body'] :
null;
    }

    /**
     * Sets body
     *
     * @param string $body Body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets conclusion
     *
     * @return string
     */
    public function getConclusion()
    {
        return array_key_exists('conclusion', $this->container) ? $this->container['conclusion'] :
null;
    }

    /**
     * Sets conclusion
     *
     * @param string $conclusion Conclusion
     *
     * @return $this
     */
    public function setConclusion($conclusion)
    {
        $this->container['conclusion'] = $conclusion;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return string
     */
    public function getChanges()
    {
        return array_key_exists('changes', $this->container) ? $this->container['changes'] :
null;
    }

    /**
     * Sets changes
     *
     * @param string $changes Version changes
     *
     * @return $this
     */
    public function setChanges($changes)
    {
        $this->container['changes'] = $changes;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return string
     */
    public function getExtra()
    {
        return array_key_exists('extra', $this->container) ? $this->container['extra'] :
null;
    }

    /**
     * Sets extra
     *
     * @param string $extra Unrecognized parts from the review
     *
     * @return $this
     */
    public function setExtra($extra)
    {
        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets pros
     *
     * @return string[]
     */
    public function getPros()
    {
        return array_key_exists('pros', $this->container) ? $this->container['pros'] :
null;
    }

    /**
     * Sets pros
     *
     * @param string[] $pros Pros
     *
     * @return $this
     */
    public function setPros($pros)
    {
        $this->container['pros'] = $pros;

        return $this;
    }

    /**
     * Gets cons
     *
     * @return string[]
     */
    public function getCons()
    {
        return array_key_exists('cons', $this->container) ? $this->container['cons'] :
null;
    }

    /**
     * Sets cons
     *
     * @param string[] $cons Cons
     *
     * @return $this
     */
    public function setCons($cons)
    {
        $this->container['cons'] = $cons;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return array_key_exists('updated_at', $this->container) ? $this->container['updated_at'] :
null;
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at Updated date in format Y-m-d H:i:s
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return array_key_exists($offset, $this->container);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Returns data which can be serialized by json_encode()
     *
     * @return mixed[]
     */
    public function jsonSerialize()
    {
        return $this->container;
    }

     /**
     * Returns data as array.
     *
     * @param bool $getAllAttributes Should convert with all attributes or just the set ones?
     *
     * @return array
     */
    public function toArray($getAllAttributes = self::GET_SET_ATTRIBUTES)
    {
        if (!$getAllAttributes) {
            return $this->container;
        }

        $data = [];
        $data['id_program'] = $this->getIdProgram();
        $data['id_platform'] = $this->getIdPlatform();
        $data['id_reviewtype'] = $this->getIdReviewtype();
        $data['id_review'] = $this->getIdReview();
        $data['type'] = $this->getType();
        $data['source'] = $this->getSource();
        $data['id_editor'] = $this->getIdEditor();
        $data['rating'] = $this->getRating();
        $data['headline'] = $this->getHeadline();
        $data['lead'] = $this->getLead();
        $data['body'] = $this->getBody();
        $data['conclusion'] = $this->getConclusion();
        $data['changes'] = $this->getChanges();
        $data['extra'] = $this->getExtra();
        $data['pros'] = $this->getPros();
        $data['cons'] = $this->getCons();
        $data['updated_at'] = $this->getUpdatedAt();

        return $data;
    }
}
