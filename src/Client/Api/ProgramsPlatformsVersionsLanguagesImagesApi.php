<?php
/**
 * ProgramsPlatformsVersionsLanguagesImagesApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Catalog API
 *
 * This API is the responsible to store all program related information.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: javier.eurrutia@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Softonic\CatalogApiSdk\ApiException;
use Softonic\CatalogApiSdk\Configuration;
use Softonic\CatalogApiSdk\HeaderSelector;
use Softonic\CatalogApiSdk\ObjectSerializer;

/**
 * ProgramsPlatformsVersionsLanguagesImagesApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramsPlatformsVersionsLanguagesImagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createProgramPlatformVersionLanguageImage
     *
     * Creates a ProgramPlatformVersionLanguageImage
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be created (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\CatalogApiSdk\Client\Model\InlineResponse201
     */
    public function createProgramPlatformVersionLanguageImage($body, $id_program, $id_platform, $id_version, $id_language)
    {
        list($response) = $this->createProgramPlatformVersionLanguageImageWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language);
        return $response;
    }

    /**
     * Operation createProgramPlatformVersionLanguageImageWithHttpInfo
     *
     * Creates a ProgramPlatformVersionLanguageImage
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be created (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\CatalogApiSdk\Client\Model\InlineResponse201, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProgramPlatformVersionLanguageImageWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\InlineResponse201';
        $request = $this->createProgramPlatformVersionLanguageImageRequest($body, $id_program, $id_platform, $id_version, $id_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\CatalogApiSdk\Client\Model\InlineResponse201',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\CatalogApiSdk\Client\Model\InlineResponse40921',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProgramPlatformVersionLanguageImageAsync
     *
     * Creates a ProgramPlatformVersionLanguageImage
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be created (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramPlatformVersionLanguageImageAsync($body, $id_program, $id_platform, $id_version, $id_language)
    {
        return $this->createProgramPlatformVersionLanguageImageAsyncWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProgramPlatformVersionLanguageImageAsyncWithHttpInfo
     *
     * Creates a ProgramPlatformVersionLanguageImage
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be created (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramPlatformVersionLanguageImageAsyncWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\InlineResponse201';
        $request = $this->createProgramPlatformVersionLanguageImageRequest($body, $id_program, $id_platform, $id_version, $id_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProgramPlatformVersionLanguageImage'
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be created (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProgramPlatformVersionLanguageImageRequest($body, $id_program, $id_platform, $id_version, $id_language)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_program' is set
        if ($id_program === null || (is_array($id_program) && count($id_program) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling createProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null || (is_array($id_platform) && count($id_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling createProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_version' is set
        if ($id_version === null || (is_array($id_version) && count($id_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling createProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_language' is set
        if ($id_language === null || (is_array($id_language) && count($id_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_language when calling createProgramPlatformVersionLanguageImage'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/versions/{id_version}/languages/{id_language}/images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_language !== null) {
            $resourcePath = str_replace(
                '{' . 'id_language' . '}',
                ObjectSerializer::toPathValue($id_language),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (('POST' === 'PUT' || 'POST' === 'POST') && $httpBody instanceof ModelInterface && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody->toArray(true));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProgramPlatformVersionLanguageImage
     *
     * Deletes a ProgramPlatformVersionLanguageImage
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\CatalogApiSdk\Client\Model\InlineResponse2001
     */
    public function deleteProgramPlatformVersionLanguageImage($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        list($response) = $this->deleteProgramPlatformVersionLanguageImageWithHttpInfo($id_program, $id_platform, $id_version, $id_language, $id_image);
        return $response;
    }

    /**
     * Operation deleteProgramPlatformVersionLanguageImageWithHttpInfo
     *
     * Deletes a ProgramPlatformVersionLanguageImage
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\CatalogApiSdk\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProgramPlatformVersionLanguageImageWithHttpInfo($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\InlineResponse2001';
        $request = $this->deleteProgramPlatformVersionLanguageImageRequest($id_program, $id_platform, $id_version, $id_language, $id_image);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\CatalogApiSdk\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProgramPlatformVersionLanguageImageAsync
     *
     * Deletes a ProgramPlatformVersionLanguageImage
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramPlatformVersionLanguageImageAsync($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        return $this->deleteProgramPlatformVersionLanguageImageAsyncWithHttpInfo($id_program, $id_platform, $id_version, $id_language, $id_image)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProgramPlatformVersionLanguageImageAsyncWithHttpInfo
     *
     * Deletes a ProgramPlatformVersionLanguageImage
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramPlatformVersionLanguageImageAsyncWithHttpInfo($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\InlineResponse2001';
        $request = $this->deleteProgramPlatformVersionLanguageImageRequest($id_program, $id_platform, $id_version, $id_language, $id_image);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProgramPlatformVersionLanguageImage'
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProgramPlatformVersionLanguageImageRequest($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null || (is_array($id_program) && count($id_program) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling deleteProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null || (is_array($id_platform) && count($id_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling deleteProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_version' is set
        if ($id_version === null || (is_array($id_version) && count($id_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling deleteProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_language' is set
        if ($id_language === null || (is_array($id_language) && count($id_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_language when calling deleteProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_image' is set
        if ($id_image === null || (is_array($id_image) && count($id_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_image when calling deleteProgramPlatformVersionLanguageImage'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/versions/{id_version}/languages/{id_language}/images/{id_image}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_language !== null) {
            $resourcePath = str_replace(
                '{' . 'id_language' . '}',
                ObjectSerializer::toPathValue($id_language),
                $resourcePath
            );
        }
        // path params
        if ($id_image !== null) {
            $resourcePath = str_replace(
                '{' . 'id_image' . '}',
                ObjectSerializer::toPathValue($id_image),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (('DELETE' === 'PUT' || 'DELETE' === 'POST') && $httpBody instanceof ModelInterface && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody->toArray(true));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findProgramPlatformVersionLanguageImage
     *
     * Gets a ProgramPlatformVersionLanguageImage list
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage[]
     */
    public function findProgramPlatformVersionLanguageImage($id_program, $id_platform, $id_version, $id_language)
    {
        list($response) = $this->findProgramPlatformVersionLanguageImageWithHttpInfo($id_program, $id_platform, $id_version, $id_language);
        return $response;
    }

    /**
     * Operation findProgramPlatformVersionLanguageImageWithHttpInfo
     *
     * Gets a ProgramPlatformVersionLanguageImage list
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function findProgramPlatformVersionLanguageImageWithHttpInfo($id_program, $id_platform, $id_version, $id_language)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage[]';
        $request = $this->findProgramPlatformVersionLanguageImageRequest($id_program, $id_platform, $id_version, $id_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findProgramPlatformVersionLanguageImageAsync
     *
     * Gets a ProgramPlatformVersionLanguageImage list
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProgramPlatformVersionLanguageImageAsync($id_program, $id_platform, $id_version, $id_language)
    {
        return $this->findProgramPlatformVersionLanguageImageAsyncWithHttpInfo($id_program, $id_platform, $id_version, $id_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findProgramPlatformVersionLanguageImageAsyncWithHttpInfo
     *
     * Gets a ProgramPlatformVersionLanguageImage list
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProgramPlatformVersionLanguageImageAsyncWithHttpInfo($id_program, $id_platform, $id_version, $id_language)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage[]';
        $request = $this->findProgramPlatformVersionLanguageImageRequest($id_program, $id_platform, $id_version, $id_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findProgramPlatformVersionLanguageImage'
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findProgramPlatformVersionLanguageImageRequest($id_program, $id_platform, $id_version, $id_language)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null || (is_array($id_program) && count($id_program) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling findProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null || (is_array($id_platform) && count($id_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling findProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_version' is set
        if ($id_version === null || (is_array($id_version) && count($id_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling findProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_language' is set
        if ($id_language === null || (is_array($id_language) && count($id_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_language when calling findProgramPlatformVersionLanguageImage'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/versions/{id_version}/languages/{id_language}/images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_language !== null) {
            $resourcePath = str_replace(
                '{' . 'id_language' . '}',
                ObjectSerializer::toPathValue($id_language),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (('GET' === 'PUT' || 'GET' === 'POST') && $httpBody instanceof ModelInterface && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody->toArray(true));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readProgramPlatformVersionLanguageImage
     *
     * Fetches a single ProgramPlatformVersionLanguageImage
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage
     */
    public function readProgramPlatformVersionLanguageImage($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        list($response) = $this->readProgramPlatformVersionLanguageImageWithHttpInfo($id_program, $id_platform, $id_version, $id_language, $id_image);
        return $response;
    }

    /**
     * Operation readProgramPlatformVersionLanguageImageWithHttpInfo
     *
     * Fetches a single ProgramPlatformVersionLanguageImage
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage, HTTP status code, HTTP response headers (array of strings)
     */
    public function readProgramPlatformVersionLanguageImageWithHttpInfo($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage';
        $request = $this->readProgramPlatformVersionLanguageImageRequest($id_program, $id_platform, $id_version, $id_language, $id_image);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readProgramPlatformVersionLanguageImageAsync
     *
     * Fetches a single ProgramPlatformVersionLanguageImage
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readProgramPlatformVersionLanguageImageAsync($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        return $this->readProgramPlatformVersionLanguageImageAsyncWithHttpInfo($id_program, $id_platform, $id_version, $id_language, $id_image)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readProgramPlatformVersionLanguageImageAsyncWithHttpInfo
     *
     * Fetches a single ProgramPlatformVersionLanguageImage
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readProgramPlatformVersionLanguageImageAsyncWithHttpInfo($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage';
        $request = $this->readProgramPlatformVersionLanguageImageRequest($id_program, $id_platform, $id_version, $id_language, $id_image);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readProgramPlatformVersionLanguageImage'
     *
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function readProgramPlatformVersionLanguageImageRequest($id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null || (is_array($id_program) && count($id_program) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling readProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null || (is_array($id_platform) && count($id_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling readProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_version' is set
        if ($id_version === null || (is_array($id_version) && count($id_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling readProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_language' is set
        if ($id_language === null || (is_array($id_language) && count($id_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_language when calling readProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_image' is set
        if ($id_image === null || (is_array($id_image) && count($id_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_image when calling readProgramPlatformVersionLanguageImage'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/versions/{id_version}/languages/{id_language}/images/{id_image}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_language !== null) {
            $resourcePath = str_replace(
                '{' . 'id_language' . '}',
                ObjectSerializer::toPathValue($id_language),
                $resourcePath
            );
        }
        // path params
        if ($id_image !== null) {
            $resourcePath = str_replace(
                '{' . 'id_image' . '}',
                ObjectSerializer::toPathValue($id_image),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (('GET' === 'PUT' || 'GET' === 'POST') && $httpBody instanceof ModelInterface && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody->toArray(true));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceProgramPlatformVersionLanguageImage
     *
     * Entirely replaces a ProgramPlatformVersionLanguageImage
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be replaced (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\CatalogApiSdk\Client\Model\InlineResponse200
     */
    public function replaceProgramPlatformVersionLanguageImage($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        list($response) = $this->replaceProgramPlatformVersionLanguageImageWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language, $id_image);
        return $response;
    }

    /**
     * Operation replaceProgramPlatformVersionLanguageImageWithHttpInfo
     *
     * Entirely replaces a ProgramPlatformVersionLanguageImage
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be replaced (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\CatalogApiSdk\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceProgramPlatformVersionLanguageImageWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\InlineResponse200';
        $request = $this->replaceProgramPlatformVersionLanguageImageRequest($body, $id_program, $id_platform, $id_version, $id_language, $id_image);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\CatalogApiSdk\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceProgramPlatformVersionLanguageImageAsync
     *
     * Entirely replaces a ProgramPlatformVersionLanguageImage
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be replaced (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceProgramPlatformVersionLanguageImageAsync($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        return $this->replaceProgramPlatformVersionLanguageImageAsyncWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceProgramPlatformVersionLanguageImageAsyncWithHttpInfo
     *
     * Entirely replaces a ProgramPlatformVersionLanguageImage
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be replaced (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceProgramPlatformVersionLanguageImageAsyncWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\InlineResponse200';
        $request = $this->replaceProgramPlatformVersionLanguageImageRequest($body, $id_program, $id_platform, $id_version, $id_language, $id_image);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceProgramPlatformVersionLanguageImage'
     *
     * @param   $body ProgramPlatformVersionLanguageImage to be replaced (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceProgramPlatformVersionLanguageImageRequest($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling replaceProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_program' is set
        if ($id_program === null || (is_array($id_program) && count($id_program) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling replaceProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null || (is_array($id_platform) && count($id_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling replaceProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_version' is set
        if ($id_version === null || (is_array($id_version) && count($id_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling replaceProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_language' is set
        if ($id_language === null || (is_array($id_language) && count($id_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_language when calling replaceProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_image' is set
        if ($id_image === null || (is_array($id_image) && count($id_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_image when calling replaceProgramPlatformVersionLanguageImage'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/versions/{id_version}/languages/{id_language}/images/{id_image}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_language !== null) {
            $resourcePath = str_replace(
                '{' . 'id_language' . '}',
                ObjectSerializer::toPathValue($id_language),
                $resourcePath
            );
        }
        // path params
        if ($id_image !== null) {
            $resourcePath = str_replace(
                '{' . 'id_image' . '}',
                ObjectSerializer::toPathValue($id_image),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (('PUT' === 'PUT' || 'PUT' === 'POST') && $httpBody instanceof ModelInterface && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody->toArray(true));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProgramPlatformVersionLanguageImage
     *
     * Partially updates a ProgramPlatformVersionLanguageImage
     *
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage $body ProgramPlatformVersionLanguageImage to be updated (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\CatalogApiSdk\Client\Model\InlineResponse2002
     */
    public function updateProgramPlatformVersionLanguageImage($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        list($response) = $this->updateProgramPlatformVersionLanguageImageWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language, $id_image);
        return $response;
    }

    /**
     * Operation updateProgramPlatformVersionLanguageImageWithHttpInfo
     *
     * Partially updates a ProgramPlatformVersionLanguageImage
     *
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage $body ProgramPlatformVersionLanguageImage to be updated (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\CatalogApiSdk\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProgramPlatformVersionLanguageImageWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\InlineResponse2002';
        $request = $this->updateProgramPlatformVersionLanguageImageRequest($body, $id_program, $id_platform, $id_version, $id_language, $id_image);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\CatalogApiSdk\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProgramPlatformVersionLanguageImageAsync
     *
     * Partially updates a ProgramPlatformVersionLanguageImage
     *
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage $body ProgramPlatformVersionLanguageImage to be updated (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramPlatformVersionLanguageImageAsync($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        return $this->updateProgramPlatformVersionLanguageImageAsyncWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProgramPlatformVersionLanguageImageAsyncWithHttpInfo
     *
     * Partially updates a ProgramPlatformVersionLanguageImage
     *
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage $body ProgramPlatformVersionLanguageImage to be updated (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramPlatformVersionLanguageImageAsyncWithHttpInfo($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\InlineResponse2002';
        $request = $this->updateProgramPlatformVersionLanguageImageRequest($body, $id_program, $id_platform, $id_version, $id_language, $id_image);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProgramPlatformVersionLanguageImage'
     *
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramPlatformVersionLanguageImage $body ProgramPlatformVersionLanguageImage to be updated (required)
     * @param  string $id_program Program ID (required)
     * @param  string $id_platform Platform ID (required)
     * @param  string $id_version Version ID (required)
     * @param  string $id_language Language ID (required)
     * @param  string $id_image Binary ID in SHA1-Hash format (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateProgramPlatformVersionLanguageImageRequest($body, $id_program, $id_platform, $id_version, $id_language, $id_image)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_program' is set
        if ($id_program === null || (is_array($id_program) && count($id_program) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling updateProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null || (is_array($id_platform) && count($id_platform) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_platform when calling updateProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_version' is set
        if ($id_version === null || (is_array($id_version) && count($id_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling updateProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_language' is set
        if ($id_language === null || (is_array($id_language) && count($id_language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_language when calling updateProgramPlatformVersionLanguageImage'
            );
        }
        // verify the required parameter 'id_image' is set
        if ($id_image === null || (is_array($id_image) && count($id_image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_image when calling updateProgramPlatformVersionLanguageImage'
            );
        }

        $resourcePath = '/programs/{id_program}/platforms/{id_platform}/versions/{id_version}/languages/{id_language}/images/{id_image}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                '{' . 'id_platform' . '}',
                ObjectSerializer::toPathValue($id_platform),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_language !== null) {
            $resourcePath = str_replace(
                '{' . 'id_language' . '}',
                ObjectSerializer::toPathValue($id_language),
                $resourcePath
            );
        }
        // path params
        if ($id_image !== null) {
            $resourcePath = str_replace(
                '{' . 'id_image' . '}',
                ObjectSerializer::toPathValue($id_image),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
            elseif (('PATCH' === 'PUT' || 'PATCH' === 'POST') && $httpBody instanceof ModelInterface && $headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($httpBody->toArray(true));
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
