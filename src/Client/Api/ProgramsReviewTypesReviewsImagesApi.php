<?php
/**
 * ProgramsReviewTypesReviewsImagesApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalog API
 *
 * API that allows to manage the programs catalog of Softonic
 *
 * OpenAPI spec version: 2.0.210-1337
 * Contact: team.platform@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Client\Api;

use \Softonic\CatalogApiSdk\ApiClient;
use \Softonic\CatalogApiSdk\ApiException;
use \Softonic\CatalogApiSdk\Configuration;
use \Softonic\CatalogApiSdk\ObjectSerializer;

/**
 * ProgramsReviewTypesReviewsImagesApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramsReviewTypesReviewsImagesApi
{
    /**
     * API Client
     *
     * @var \Softonic\CatalogApiSdk\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Softonic\CatalogApiSdk\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Softonic\CatalogApiSdk\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://catalog.sftapi.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Softonic\CatalogApiSdk\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Softonic\CatalogApiSdk\ApiClient $apiClient set the API client
     *
     * @return ProgramsReviewTypesReviewsImagesApi
     */
    public function setApiClient(\Softonic\CatalogApiSdk\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createProgramReviewTypeReviewImage
     *
     * Creates a new ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage $body  (optional)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return void
     */
    public function createProgramReviewTypeReviewImage($id_program, $id_review_type, $id_review, $body = null)
    {
        list($response) = $this->createProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $body);
        return $response;
    }

    /**
     * Operation createProgramReviewTypeReviewImageWithHttpInfo
     *
     * Creates a new ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage $body  (optional)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $body = null)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling createProgramReviewTypeReviewImage');
        }
        if ((strlen($id_program) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.createProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_program) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.createProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_review_type' is set
        if ($id_review_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review_type when calling createProgramReviewTypeReviewImage');
        }
        // verify the required parameter 'id_review' is set
        if ($id_review === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review when calling createProgramReviewTypeReviewImage');
        }
        if ((strlen($id_review) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.createProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_review) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.createProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_review_type !== null) {
            $resourcePath = str_replace(
                "{" . "id_review_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review_type),
                $resourcePath
            );
        }
        // path params
        if ($id_review !== null) {
            $resourcePath = str_replace(
                "{" . "id_review" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProgramReviewTypeReviewImage
     *
     * Deletes a ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param string $id_image Image identifier in SHA1-Hash format (required)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return void
     */
    public function deleteProgramReviewTypeReviewImage($id_program, $id_review_type, $id_review, $id_image)
    {
        list($response) = $this->deleteProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $id_image);
        return $response;
    }

    /**
     * Operation deleteProgramReviewTypeReviewImageWithHttpInfo
     *
     * Deletes a ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param string $id_image Image identifier in SHA1-Hash format (required)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $id_image)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling deleteProgramReviewTypeReviewImage');
        }
        if ((strlen($id_program) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.deleteProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_program) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.deleteProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_review_type' is set
        if ($id_review_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review_type when calling deleteProgramReviewTypeReviewImage');
        }
        // verify the required parameter 'id_review' is set
        if ($id_review === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review when calling deleteProgramReviewTypeReviewImage');
        }
        if ((strlen($id_review) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.deleteProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_review) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.deleteProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_image' is set
        if ($id_image === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_image when calling deleteProgramReviewTypeReviewImage');
        }
        if ((strlen($id_image) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_image" when calling ProgramsReviewTypesReviewsImagesApi.deleteProgramReviewTypeReviewImage, must be smaller than or equal to 40.');
        }
        if ((strlen($id_image) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_image" when calling ProgramsReviewTypesReviewsImagesApi.deleteProgramReviewTypeReviewImage, must be bigger than or equal to 40.');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images/{id_image}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_review_type !== null) {
            $resourcePath = str_replace(
                "{" . "id_review_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review_type),
                $resourcePath
            );
        }
        // path params
        if ($id_review !== null) {
            $resourcePath = str_replace(
                "{" . "id_review" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review),
                $resourcePath
            );
        }
        // path params
        if ($id_image !== null) {
            $resourcePath = str_replace(
                "{" . "id_image" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_image),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images/{id_image}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation findProgramReviewTypeReviewImage
     *
     * List of ProgramReviewTypeReviewImages
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage[]
     */
    public function findProgramReviewTypeReviewImage($id_program, $id_review_type, $id_review)
    {
        list($response) = $this->findProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review);
        return $response;
    }

    /**
     * Operation findProgramReviewTypeReviewImageWithHttpInfo
     *
     * List of ProgramReviewTypeReviewImages
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return array of \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage[], HTTP status code, HTTP response headers (array of strings)
     */
    public function findProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling findProgramReviewTypeReviewImage');
        }
        if ((strlen($id_program) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.findProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_program) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.findProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_review_type' is set
        if ($id_review_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review_type when calling findProgramReviewTypeReviewImage');
        }
        // verify the required parameter 'id_review' is set
        if ($id_review === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review when calling findProgramReviewTypeReviewImage');
        }
        if ((strlen($id_review) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.findProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_review) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.findProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_review_type !== null) {
            $resourcePath = str_replace(
                "{" . "id_review_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review_type),
                $resourcePath
            );
        }
        // path params
        if ($id_review !== null) {
            $resourcePath = str_replace(
                "{" . "id_review" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage[]',
                '/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation readProgramReviewTypeReviewImage
     *
     * Fetches a single ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param string $id_image Image identifier in SHA1-Hash format (required)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage
     */
    public function readProgramReviewTypeReviewImage($id_program, $id_review_type, $id_review, $id_image)
    {
        list($response) = $this->readProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $id_image);
        return $response;
    }

    /**
     * Operation readProgramReviewTypeReviewImageWithHttpInfo
     *
     * Fetches a single ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param string $id_image Image identifier in SHA1-Hash format (required)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return array of \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage, HTTP status code, HTTP response headers (array of strings)
     */
    public function readProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $id_image)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling readProgramReviewTypeReviewImage');
        }
        if ((strlen($id_program) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.readProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_program) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.readProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_review_type' is set
        if ($id_review_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review_type when calling readProgramReviewTypeReviewImage');
        }
        // verify the required parameter 'id_review' is set
        if ($id_review === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review when calling readProgramReviewTypeReviewImage');
        }
        if ((strlen($id_review) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.readProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_review) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.readProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_image' is set
        if ($id_image === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_image when calling readProgramReviewTypeReviewImage');
        }
        if ((strlen($id_image) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_image" when calling ProgramsReviewTypesReviewsImagesApi.readProgramReviewTypeReviewImage, must be smaller than or equal to 40.');
        }
        if ((strlen($id_image) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_image" when calling ProgramsReviewTypesReviewsImagesApi.readProgramReviewTypeReviewImage, must be bigger than or equal to 40.');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images/{id_image}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_review_type !== null) {
            $resourcePath = str_replace(
                "{" . "id_review_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review_type),
                $resourcePath
            );
        }
        // path params
        if ($id_review !== null) {
            $resourcePath = str_replace(
                "{" . "id_review" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review),
                $resourcePath
            );
        }
        // path params
        if ($id_image !== null) {
            $resourcePath = str_replace(
                "{" . "id_image" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_image),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage',
                '/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images/{id_image}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation replaceProgramReviewTypeReviewImage
     *
     * Entirely replaces a ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param string $id_image Image identifier in SHA1-Hash format (required)
     * @param \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage $body  (optional)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return void
     */
    public function replaceProgramReviewTypeReviewImage($id_program, $id_review_type, $id_review, $id_image, $body = null)
    {
        list($response) = $this->replaceProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $id_image, $body);
        return $response;
    }

    /**
     * Operation replaceProgramReviewTypeReviewImageWithHttpInfo
     *
     * Entirely replaces a ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param string $id_image Image identifier in SHA1-Hash format (required)
     * @param \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage $body  (optional)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $id_image, $body = null)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling replaceProgramReviewTypeReviewImage');
        }
        if ((strlen($id_program) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.replaceProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_program) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.replaceProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_review_type' is set
        if ($id_review_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review_type when calling replaceProgramReviewTypeReviewImage');
        }
        // verify the required parameter 'id_review' is set
        if ($id_review === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review when calling replaceProgramReviewTypeReviewImage');
        }
        if ((strlen($id_review) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.replaceProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_review) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.replaceProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_image' is set
        if ($id_image === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_image when calling replaceProgramReviewTypeReviewImage');
        }
        if ((strlen($id_image) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_image" when calling ProgramsReviewTypesReviewsImagesApi.replaceProgramReviewTypeReviewImage, must be smaller than or equal to 40.');
        }
        if ((strlen($id_image) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_image" when calling ProgramsReviewTypesReviewsImagesApi.replaceProgramReviewTypeReviewImage, must be bigger than or equal to 40.');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images/{id_image}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_review_type !== null) {
            $resourcePath = str_replace(
                "{" . "id_review_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review_type),
                $resourcePath
            );
        }
        // path params
        if ($id_review !== null) {
            $resourcePath = str_replace(
                "{" . "id_review" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review),
                $resourcePath
            );
        }
        // path params
        if ($id_image !== null) {
            $resourcePath = str_replace(
                "{" . "id_image" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_image),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images/{id_image}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateProgramReviewTypeReviewImage
     *
     * Partially updates a ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param string $id_image Image identifier in SHA1-Hash format (required)
     * @param \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage $body  (optional)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return void
     */
    public function updateProgramReviewTypeReviewImage($id_program, $id_review_type, $id_review, $id_image, $body = null)
    {
        list($response) = $this->updateProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $id_image, $body);
        return $response;
    }

    /**
     * Operation updateProgramReviewTypeReviewImageWithHttpInfo
     *
     * Partially updates a ProgramReviewTypeReviewImage
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_review_type Review owner type (required)
     * @param string $id_review Review identifier as UUID (required)
     * @param string $id_image Image identifier in SHA1-Hash format (required)
     * @param \Softonic\CatalogApiSdk\Client\Model\ProgramReviewTypeReviewImage $body  (optional)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProgramReviewTypeReviewImageWithHttpInfo($id_program, $id_review_type, $id_review, $id_image, $body = null)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling updateProgramReviewTypeReviewImage');
        }
        if ((strlen($id_program) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.updateProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_program) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsReviewTypesReviewsImagesApi.updateProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_review_type' is set
        if ($id_review_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review_type when calling updateProgramReviewTypeReviewImage');
        }
        // verify the required parameter 'id_review' is set
        if ($id_review === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_review when calling updateProgramReviewTypeReviewImage');
        }
        if ((strlen($id_review) > 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.updateProgramReviewTypeReviewImage, must be smaller than or equal to 36.');
        }
        if ((strlen($id_review) < 36)) {
            throw new \InvalidArgumentException('invalid length for "$id_review" when calling ProgramsReviewTypesReviewsImagesApi.updateProgramReviewTypeReviewImage, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_image' is set
        if ($id_image === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_image when calling updateProgramReviewTypeReviewImage');
        }
        if ((strlen($id_image) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_image" when calling ProgramsReviewTypesReviewsImagesApi.updateProgramReviewTypeReviewImage, must be smaller than or equal to 40.');
        }
        if ((strlen($id_image) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$id_image" when calling ProgramsReviewTypesReviewsImagesApi.updateProgramReviewTypeReviewImage, must be bigger than or equal to 40.');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images/{id_image}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_review_type !== null) {
            $resourcePath = str_replace(
                "{" . "id_review_type" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review_type),
                $resourcePath
            );
        }
        // path params
        if ($id_review !== null) {
            $resourcePath = str_replace(
                "{" . "id_review" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_review),
                $resourcePath
            );
        }
        // path params
        if ($id_image !== null) {
            $resourcePath = str_replace(
                "{" . "id_image" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_image),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/programs/{id_program}/review-types/{id_review_type}/reviews/{id_review}/images/{id_image}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
