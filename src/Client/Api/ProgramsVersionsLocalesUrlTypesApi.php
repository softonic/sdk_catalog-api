<?php
/**
 * ProgramsVersionsLocalesUrlTypesApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalog API
 *
 * API that allows to manage the programs catalog of Softonic
 *
 * OpenAPI spec version: 2.42.0
 * Contact: team.platform@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Softonic\CatalogApiSdk\ApiException;
use Softonic\CatalogApiSdk\Configuration;
use Softonic\CatalogApiSdk\HeaderSelector;
use Softonic\CatalogApiSdk\ObjectSerializer;

/**
 * ProgramsVersionsLocalesUrlTypesApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramsVersionsLocalesUrlTypesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createProgramVersionLocaleUrlType
     *
     * Creates a new ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body body (optional)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createProgramVersionLocaleUrlType($id_program, $id_version, $id_locale, $body = null)
    {
        $this->createProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $body);
    }

    /**
     * Operation createProgramVersionLocaleUrlTypeWithHttpInfo
     *
     * Creates a new ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $body = null)
    {
        $returnType = '';
        $request = $this->createProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createProgramVersionLocaleUrlTypeAsync
     *
     * Creates a new ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramVersionLocaleUrlTypeAsync($id_program, $id_version, $id_locale, $body = null)
    {
        return $this->createProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProgramVersionLocaleUrlTypeAsyncWithHttpInfo
     *
     * Creates a new ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $body = null)
    {
        $returnType = '';
        $request = $this->createProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProgramVersionLocaleUrlType'
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $body = null)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling createProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_program) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.createProgramVersionLocaleUrlType, must be smaller than or equal to 36.');
        }
        if (strlen($id_program) < 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.createProgramVersionLocaleUrlType, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling createProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_version) > 60) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.createProgramVersionLocaleUrlType, must be smaller than or equal to 60.');
        }
        if (strlen($id_version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.createProgramVersionLocaleUrlType, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling createProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_locale) > 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.createProgramVersionLocaleUrlType, must be smaller than or equal to 2.');
        }
        if (strlen($id_locale) < 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.createProgramVersionLocaleUrlType, must be bigger than or equal to 2.');
        }


        $resourcePath = '/programs/{id_program}/versions/{id_version}/locales/{id_locale}/url-types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProgramVersionLocaleUrlType
     *
     * Deletes a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProgramVersionLocaleUrlType($id_program, $id_version, $id_locale, $id_url_type)
    {
        $this->deleteProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type);
    }

    /**
     * Operation deleteProgramVersionLocaleUrlTypeWithHttpInfo
     *
     * Deletes a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type)
    {
        $returnType = '';
        $request = $this->deleteProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProgramVersionLocaleUrlTypeAsync
     *
     * Deletes a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramVersionLocaleUrlTypeAsync($id_program, $id_version, $id_locale, $id_url_type)
    {
        return $this->deleteProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProgramVersionLocaleUrlTypeAsyncWithHttpInfo
     *
     * Deletes a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type)
    {
        $returnType = '';
        $request = $this->deleteProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProgramVersionLocaleUrlType'
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling deleteProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_program) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.deleteProgramVersionLocaleUrlType, must be smaller than or equal to 36.');
        }
        if (strlen($id_program) < 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.deleteProgramVersionLocaleUrlType, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling deleteProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_version) > 60) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.deleteProgramVersionLocaleUrlType, must be smaller than or equal to 60.');
        }
        if (strlen($id_version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.deleteProgramVersionLocaleUrlType, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling deleteProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_locale) > 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.deleteProgramVersionLocaleUrlType, must be smaller than or equal to 2.');
        }
        if (strlen($id_locale) < 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.deleteProgramVersionLocaleUrlType, must be bigger than or equal to 2.');
        }

        // verify the required parameter 'id_url_type' is set
        if ($id_url_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_url_type when calling deleteProgramVersionLocaleUrlType'
            );
        }

        $resourcePath = '/programs/{id_program}/versions/{id_version}/locales/{id_locale}/url-types/{id_url_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }
        // path params
        if ($id_url_type !== null) {
            $resourcePath = str_replace(
                '{' . 'id_url_type' . '}',
                ObjectSerializer::toPathValue($id_url_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findProgramVersionLocaleUrlType
     *
     * List of ProgramVersionLocaleUrlTypes
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType[]
     */
    public function findProgramVersionLocaleUrlType($id_program, $id_version, $id_locale)
    {
        list($response) = $this->findProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale);
        return $response;
    }

    /**
     * Operation findProgramVersionLocaleUrlTypeWithHttpInfo
     *
     * List of ProgramVersionLocaleUrlTypes
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function findProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType[]';
        $request = $this->findProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findProgramVersionLocaleUrlTypeAsync
     *
     * List of ProgramVersionLocaleUrlTypes
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProgramVersionLocaleUrlTypeAsync($id_program, $id_version, $id_locale)
    {
        return $this->findProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findProgramVersionLocaleUrlTypeAsyncWithHttpInfo
     *
     * List of ProgramVersionLocaleUrlTypes
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType[]';
        $request = $this->findProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findProgramVersionLocaleUrlType'
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling findProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_program) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.findProgramVersionLocaleUrlType, must be smaller than or equal to 36.');
        }
        if (strlen($id_program) < 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.findProgramVersionLocaleUrlType, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling findProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_version) > 60) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.findProgramVersionLocaleUrlType, must be smaller than or equal to 60.');
        }
        if (strlen($id_version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.findProgramVersionLocaleUrlType, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling findProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_locale) > 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.findProgramVersionLocaleUrlType, must be smaller than or equal to 2.');
        }
        if (strlen($id_locale) < 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.findProgramVersionLocaleUrlType, must be bigger than or equal to 2.');
        }


        $resourcePath = '/programs/{id_program}/versions/{id_version}/locales/{id_locale}/url-types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readProgramVersionLocaleUrlType
     *
     * Fetches a single ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType
     */
    public function readProgramVersionLocaleUrlType($id_program, $id_version, $id_locale, $id_url_type)
    {
        list($response) = $this->readProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type);
        return $response;
    }

    /**
     * Operation readProgramVersionLocaleUrlTypeWithHttpInfo
     *
     * Fetches a single ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType, HTTP status code, HTTP response headers (array of strings)
     */
    public function readProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType';
        $request = $this->readProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readProgramVersionLocaleUrlTypeAsync
     *
     * Fetches a single ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readProgramVersionLocaleUrlTypeAsync($id_program, $id_version, $id_locale, $id_url_type)
    {
        return $this->readProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readProgramVersionLocaleUrlTypeAsyncWithHttpInfo
     *
     * Fetches a single ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type)
    {
        $returnType = '\Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType';
        $request = $this->readProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readProgramVersionLocaleUrlType'
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function readProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling readProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_program) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.readProgramVersionLocaleUrlType, must be smaller than or equal to 36.');
        }
        if (strlen($id_program) < 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.readProgramVersionLocaleUrlType, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling readProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_version) > 60) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.readProgramVersionLocaleUrlType, must be smaller than or equal to 60.');
        }
        if (strlen($id_version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.readProgramVersionLocaleUrlType, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling readProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_locale) > 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.readProgramVersionLocaleUrlType, must be smaller than or equal to 2.');
        }
        if (strlen($id_locale) < 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.readProgramVersionLocaleUrlType, must be bigger than or equal to 2.');
        }

        // verify the required parameter 'id_url_type' is set
        if ($id_url_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_url_type when calling readProgramVersionLocaleUrlType'
            );
        }

        $resourcePath = '/programs/{id_program}/versions/{id_version}/locales/{id_locale}/url-types/{id_url_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }
        // path params
        if ($id_url_type !== null) {
            $resourcePath = str_replace(
                '{' . 'id_url_type' . '}',
                ObjectSerializer::toPathValue($id_url_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceProgramVersionLocaleUrlType
     *
     * Entirely replaces a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body body (optional)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function replaceProgramVersionLocaleUrlType($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        $this->replaceProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type, $body);
    }

    /**
     * Operation replaceProgramVersionLocaleUrlTypeWithHttpInfo
     *
     * Entirely replaces a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        $returnType = '';
        $request = $this->replaceProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation replaceProgramVersionLocaleUrlTypeAsync
     *
     * Entirely replaces a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceProgramVersionLocaleUrlTypeAsync($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        return $this->replaceProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceProgramVersionLocaleUrlTypeAsyncWithHttpInfo
     *
     * Entirely replaces a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        $returnType = '';
        $request = $this->replaceProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceProgramVersionLocaleUrlType'
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling replaceProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_program) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.replaceProgramVersionLocaleUrlType, must be smaller than or equal to 36.');
        }
        if (strlen($id_program) < 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.replaceProgramVersionLocaleUrlType, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling replaceProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_version) > 60) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.replaceProgramVersionLocaleUrlType, must be smaller than or equal to 60.');
        }
        if (strlen($id_version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.replaceProgramVersionLocaleUrlType, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling replaceProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_locale) > 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.replaceProgramVersionLocaleUrlType, must be smaller than or equal to 2.');
        }
        if (strlen($id_locale) < 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.replaceProgramVersionLocaleUrlType, must be bigger than or equal to 2.');
        }

        // verify the required parameter 'id_url_type' is set
        if ($id_url_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_url_type when calling replaceProgramVersionLocaleUrlType'
            );
        }

        $resourcePath = '/programs/{id_program}/versions/{id_version}/locales/{id_locale}/url-types/{id_url_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }
        // path params
        if ($id_url_type !== null) {
            $resourcePath = str_replace(
                '{' . 'id_url_type' . '}',
                ObjectSerializer::toPathValue($id_url_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProgramVersionLocaleUrlType
     *
     * Partially updates a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body body (optional)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateProgramVersionLocaleUrlType($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        $this->updateProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type, $body);
    }

    /**
     * Operation updateProgramVersionLocaleUrlTypeWithHttpInfo
     *
     * Partially updates a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProgramVersionLocaleUrlTypeWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        $returnType = '';
        $request = $this->updateProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateProgramVersionLocaleUrlTypeAsync
     *
     * Partially updates a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramVersionLocaleUrlTypeAsync($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        return $this->updateProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProgramVersionLocaleUrlTypeAsyncWithHttpInfo
     *
     * Partially updates a ProgramVersionLocaleUrlType
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProgramVersionLocaleUrlTypeAsyncWithHttpInfo($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        $returnType = '';
        $request = $this->updateProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProgramVersionLocaleUrlType'
     *
     * @param  string $id_program Program UUID (required)
     * @param  string $id_version Program version identifier (required)
     * @param  string $id_locale Locale identifier (required)
     * @param  string $id_url_type URL types identifier (required)
     * @param  \Softonic\CatalogApiSdk\Client\Model\ProgramVersionLocaleUrlType $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateProgramVersionLocaleUrlTypeRequest($id_program, $id_version, $id_locale, $id_url_type, $body = null)
    {
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_program when calling updateProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_program) > 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.updateProgramVersionLocaleUrlType, must be smaller than or equal to 36.');
        }
        if (strlen($id_program) < 36) {
            throw new \InvalidArgumentException('invalid length for "$id_program" when calling ProgramsVersionsLocalesUrlTypesApi.updateProgramVersionLocaleUrlType, must be bigger than or equal to 36.');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_version when calling updateProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_version) > 60) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.updateProgramVersionLocaleUrlType, must be smaller than or equal to 60.');
        }
        if (strlen($id_version) < 1) {
            throw new \InvalidArgumentException('invalid length for "$id_version" when calling ProgramsVersionsLocalesUrlTypesApi.updateProgramVersionLocaleUrlType, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_locale when calling updateProgramVersionLocaleUrlType'
            );
        }
        if (strlen($id_locale) > 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.updateProgramVersionLocaleUrlType, must be smaller than or equal to 2.');
        }
        if (strlen($id_locale) < 2) {
            throw new \InvalidArgumentException('invalid length for "$id_locale" when calling ProgramsVersionsLocalesUrlTypesApi.updateProgramVersionLocaleUrlType, must be bigger than or equal to 2.');
        }

        // verify the required parameter 'id_url_type' is set
        if ($id_url_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_url_type when calling updateProgramVersionLocaleUrlType'
            );
        }

        $resourcePath = '/programs/{id_program}/versions/{id_version}/locales/{id_locale}/url-types/{id_url_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                '{' . 'id_program' . '}',
                ObjectSerializer::toPathValue($id_program),
                $resourcePath
            );
        }
        // path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                '{' . 'id_version' . '}',
                ObjectSerializer::toPathValue($id_version),
                $resourcePath
            );
        }
        // path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                '{' . 'id_locale' . '}',
                ObjectSerializer::toPathValue($id_locale),
                $resourcePath
            );
        }
        // path params
        if ($id_url_type !== null) {
            $resourcePath = str_replace(
                '{' . 'id_url_type' . '}',
                ObjectSerializer::toPathValue($id_url_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
