<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
namespace Softonic\CatalogApiInstance\Sdk\Services;

use Softonic\CatalogApiInstance\Sdk\APIClientInterface;

/**
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class NotesApi
{
    function __construct(APIClientInterface $api_client)
    {
        $this->api_client = $api_client;
    }

   

    /**
     * read
     * Fetches a single resource
     *
     * @param integer $id_notes The id of the note
     *
     * @return mixed
     */
    public function read($id_notes)
    {

        //parse inputs
        $resource_path = "/notes/{id_notes}";
        $resource_path = str_replace("{format}", "json", $resource_path);
        $method = "GET";

        $query_params = array();
        $header_params = array();
        $header_params['Accept'] = 'application/json';
        $header_params['Content-Type'] = 'application/json';

        if($id_notes != null) {
             $resource_path = str_replace("{" . "id_notes" . "}",
                $this->api_client->toPathValue($id_notes), $resource_path);
        }
        if (!isset($data)) {
            $data = array();
        }
        $response = $this->api_client->callAPI($resource_path, $method,
                                              $query_params, $data,
                                              $header_params);


        if(!$response){
            return null;
        }

        return $response;


    }


    /**
     * delete
     * Deletes a resource
     *
     * @param integer $id_notes The id of the note
     *
     * @return mixed
     */
    public function delete($id_notes)
    {

        //parse inputs
        $resource_path = "/notes/{id_notes}";
        $resource_path = str_replace("{format}", "json", $resource_path);
        $method = "DELETE";

        $query_params = array();
        $header_params = array();
        $header_params['Accept'] = 'application/json';
        $header_params['Content-Type'] = 'application/json';

        if($id_notes != null) {
             $resource_path = str_replace("{" . "id_notes" . "}",
                $this->api_client->toPathValue($id_notes), $resource_path);
        }
        if (!isset($data)) {
            $data = array();
        }
        $response = $this->api_client->callAPI($resource_path, $method,
                                              $query_params, $data,
                                              $header_params);


        if(!$response){
            return null;
        }

        return $response;


    }


    /**
     * replace
     * Entirely replaces a resource
     *
     * @param integer $id_notes The id of the note
     * @param array $data possible keys are described below
     *
     * title, string: The title of the note (required)
     * note, string: The contents of the note (required)
     *
     * @return mixed
     */
    public function replace($id_notes, array $data)
    {

        //parse inputs
        $resource_path = "/notes/{id_notes}";
        $resource_path = str_replace("{format}", "json", $resource_path);
        $method = "PUT";

        $query_params = array();
        $header_params = array();
        $header_params['Accept'] = 'application/json';
        $header_params['Content-Type'] = 'application/json';

        if($id_notes != null) {
             $resource_path = str_replace("{" . "id_notes" . "}",
                $this->api_client->toPathValue($id_notes), $resource_path);
        }
        if (!isset($data)) {
            $data = array();
        }
        $response = $this->api_client->callAPI($resource_path, $method,
                                              $query_params, $data,
                                              $header_params);


        if(!$response){
            return null;
        }

        return $response;


    }


    /**
     * update
     * Partially updates a resource
     *
     * @param integer $id_notes The id of the note
     * @param array $data possible keys are described below
     *
     * title, string: The title of the note (optional)
     * note, string: The contents of the note (optional)
     *
     * @return mixed
     */
    public function update($id_notes, array $data)
    {

        //parse inputs
        $resource_path = "/notes/{id_notes}";
        $resource_path = str_replace("{format}", "json", $resource_path);
        $method = "PATCH";

        $query_params = array();
        $header_params = array();
        $header_params['Accept'] = 'application/json';
        $header_params['Content-Type'] = 'application/json';

        if($id_notes != null) {
             $resource_path = str_replace("{" . "id_notes" . "}",
                $this->api_client->toPathValue($id_notes), $resource_path);
        }
        if (!isset($data)) {
            $data = array();
        }
        $response = $this->api_client->callAPI($resource_path, $method,
                                              $query_params, $data,
                                              $header_params);


        if(!$response){
            return null;
        }

        return $response;


    }


    /**
     * find
     * List of resources
     *
     * @param string $search Search parameter
     *
     * @return mixed
     */
    public function find($search)
    {

        //parse inputs
        $resource_path = "/notes";
        $resource_path = str_replace("{format}", "json", $resource_path);
        $method = "GET";

        $query_params = array();
        $header_params = array();
        $header_params['Accept'] = 'application/json';
        $header_params['Content-Type'] = 'application/json';

        if($search != null) {
            $query_params['search'] = $this->api_client->toQueryValue($search);
        }
        if (!isset($data)) {
            $data = array();
        }
        $response = $this->api_client->callAPI($resource_path, $method,
                                              $query_params, $data,
                                              $header_params);


        if(!$response){
            return null;
        }

        return $response;


    }


    /**
     * create
     * Creates a new resource
     *
     * @param array $data possible keys are described below
     *
     * title, string: The title of the note (required)
     * note, string: The contents of the note (required)
     *
     * @return mixed
     */
    public function create(array $data)
    {

        //parse inputs
        $resource_path = "/notes";
        $resource_path = str_replace("{format}", "json", $resource_path);
        $method = "POST";

        $query_params = array();
        $header_params = array();
        $header_params['Accept'] = 'application/json';
        $header_params['Content-Type'] = 'application/json';

        if (!isset($data)) {
            $data = array();
        }
        $response = $this->api_client->callAPI($resource_path, $method,
                                              $query_params, $data,
                                              $header_params);


        if(!$response){
            return null;
        }

        return $response;


    }


}

