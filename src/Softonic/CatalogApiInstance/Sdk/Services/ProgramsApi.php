<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
namespace Softonic\CatalogApiInstance\Sdk\Services;

use Softonic\CatalogApiInstance\Sdk\APIClientInterface;

/**
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class ProgramsApi
{
    function __construct(APIClientInterface $api_client)
    {
        $this->api_client = $api_client;
    }

   

    /**
     * read
     * Fetches a single resource
     *
     * @param integer $id_programs Program identifier
     * @param bool $expand Adds all the program data to the program resource data
     *
     * @return mixed
     */
    public function read($id_programs, $expand)
    {

        //parse inputs
        $resource_path = "/programs/{id_programs}";
        $resource_path = str_replace("{format}", "json", $resource_path);
        $method = "GET";

        $query_params = array();
        $header_params = array();
        $header_params['Accept'] = 'application/json';
        $header_params['Content-Type'] = 'application/json';

        if($id_programs != null) {
             $resource_path = str_replace("{" . "id_programs" . "}",
                $this->api_client->toPathValue($id_programs), $resource_path);
        }
        if($expand != null) {
            $query_params['expand'] = $this->api_client->toQueryValue($expand);
        }
        if (!isset($data)) {
            $data = array();
        }
        $response = $this->api_client->callAPI($resource_path, $method,
                                              $query_params, $data,
                                              $header_params);


        if(!$response){
            return null;
        }

        return $response;


    }


    /**
     * find
     * List of resources
     *
     * @param integer $page Page number
     * @param integer $id_statuses Status identifier
     * @param integer $id_platforms Platform identifier
     * @param integer $min_modified_at Minimum modification date to use ( unixtimestamp )
     * @param integer $max_modified_at Maximum modification date to use ( unixtimestamp )
     * @param string $sorting_field Sorting field to use ( id | modified_at )
     * @param string $sorting_direction Sorting direction to use ( ascending | descending )
     *
     * @return mixed
     */
    public function find($page, $id_statuses, $id_platforms, $min_modified_at, $max_modified_at, $sorting_field, $sorting_direction)
    {

        //parse inputs
        $resource_path = "/programs";
        $resource_path = str_replace("{format}", "json", $resource_path);
        $method = "GET";

        $query_params = array();
        $header_params = array();
        $header_params['Accept'] = 'application/json';
        $header_params['Content-Type'] = 'application/json';

        if($page != null) {
            $query_params['page'] = $this->api_client->toQueryValue($page);
        }
        if($id_statuses != null) {
            $query_params['id_statuses'] = $this->api_client->toQueryValue($id_statuses);
        }
        if($id_platforms != null) {
            $query_params['id_platforms'] = $this->api_client->toQueryValue($id_platforms);
        }
        if($min_modified_at != null) {
            $query_params['min_modified_at'] = $this->api_client->toQueryValue($min_modified_at);
        }
        if($max_modified_at != null) {
            $query_params['max_modified_at'] = $this->api_client->toQueryValue($max_modified_at);
        }
        if($sorting_field != null) {
            $query_params['sorting_field'] = $this->api_client->toQueryValue($sorting_field);
        }
        if($sorting_direction != null) {
            $query_params['sorting_direction'] = $this->api_client->toQueryValue($sorting_direction);
        }
        if (!isset($data)) {
            $data = array();
        }
        $response = $this->api_client->callAPI($resource_path, $method,
                                              $query_params, $data,
                                              $header_params);


        if(!$response){
            return null;
        }

        return $response;


    }


}

