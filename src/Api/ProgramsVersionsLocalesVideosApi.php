<?php
/**
 * ProgramsVersionsLocalesVideosApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: 2.0.17-83
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Api;

use \Softonic\CatalogApiSdk\Configuration;
use \Softonic\CatalogApiSdk\ApiClient;
use \Softonic\CatalogApiSdk\ApiException;
use \Softonic\CatalogApiSdk\ObjectSerializer;

/**
 * ProgramsVersionsLocalesVideosApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgramsVersionsLocalesVideosApi
{

    /**
     * API Client
     *
     * @var \Softonic\CatalogApiSdk\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Softonic\CatalogApiSdk\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Softonic\CatalogApiSdk\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://v2.catalog.priv.sftapi.com.sft-staging.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Softonic\CatalogApiSdk\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Softonic\CatalogApiSdk\ApiClient $apiClient set the API client
     *
     * @return ProgramsVersionsLocalesVideosApi
     */
    public function setApiClient(\Softonic\CatalogApiSdk\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createProgramVersionLocaleVideo
     *
     * Creates a new ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param \Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo $body  (optional)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function createProgramVersionLocaleVideo($id_program, $id_version, $id_locale, $body = null)
    {
        list($response) = $this->createProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $body);
        return $response;
    }


    /**
     * Operation createProgramVersionLocaleVideoWithHttpInfo
     *
     * Creates a new ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param \Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo $body  (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function createProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $body = null)
    {
        
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling createProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling createProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_locale when calling createProgramVersionLocaleVideo');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/versions/{id_version}/locales/{id_locale}/videos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }// path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                "{" . "id_locale" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_locale),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deleteProgramVersionLocaleVideo
     *
     * Deletes a ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param string $id_video Video Identifier (required)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function deleteProgramVersionLocaleVideo($id_program, $id_version, $id_locale, $id_video)
    {
        list($response) = $this->deleteProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $id_video);
        return $response;
    }


    /**
     * Operation deleteProgramVersionLocaleVideoWithHttpInfo
     *
     * Deletes a ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param string $id_video Video Identifier (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function deleteProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $id_video)
    {
        
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling deleteProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling deleteProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_locale when calling deleteProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_video' is set
        if ($id_video === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_video when calling deleteProgramVersionLocaleVideo');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/versions/{id_version}/locales/{id_locale}/videos/{id_video}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }// path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                "{" . "id_locale" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_locale),
                $resourcePath
            );
        }// path params
        if ($id_video !== null) {
            $resourcePath = str_replace(
                "{" . "id_video" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_video),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation findProgramVersionLocaleVideo
     *
     * List of ProgramVersionLocaleVideos.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     *
     * @return \Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo[]
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function findProgramVersionLocaleVideo($id_program, $id_version, $id_locale)
    {
        list($response) = $this->findProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale);
        return $response;
    }


    /**
     * Operation findProgramVersionLocaleVideoWithHttpInfo
     *
     * List of ProgramVersionLocaleVideos.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     *
     * @return Array of \Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function findProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale)
    {
        
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling findProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling findProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_locale when calling findProgramVersionLocaleVideo');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/versions/{id_version}/locales/{id_locale}/videos";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }// path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                "{" . "id_locale" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_locale),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo[]'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation readProgramVersionLocaleVideo
     *
     * Fetches a single ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param string $id_video Video Identifier (required)
     *
     * @return \Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function readProgramVersionLocaleVideo($id_program, $id_version, $id_locale, $id_video)
    {
        list($response) = $this->readProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $id_video);
        return $response;
    }


    /**
     * Operation readProgramVersionLocaleVideoWithHttpInfo
     *
     * Fetches a single ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param string $id_video Video Identifier (required)
     *
     * @return Array of \Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function readProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $id_video)
    {
        
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling readProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling readProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_locale when calling readProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_video' is set
        if ($id_video === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_video when calling readProgramVersionLocaleVideo');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/versions/{id_version}/locales/{id_locale}/videos/{id_video}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }// path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                "{" . "id_locale" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_locale),
                $resourcePath
            );
        }// path params
        if ($id_video !== null) {
            $resourcePath = str_replace(
                "{" . "id_video" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_video),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\CatalogApiSdk\Model\ProgramVersionLocaleVideo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation replaceProgramVersionLocaleVideo
     *
     * Entirely replaces a ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param string $id_video Video Identifier (required)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function replaceProgramVersionLocaleVideo($id_program, $id_version, $id_locale, $id_video)
    {
        list($response) = $this->replaceProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $id_video);
        return $response;
    }


    /**
     * Operation replaceProgramVersionLocaleVideoWithHttpInfo
     *
     * Entirely replaces a ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param string $id_video Video Identifier (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function replaceProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $id_video)
    {
        
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling replaceProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling replaceProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_locale when calling replaceProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_video' is set
        if ($id_video === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_video when calling replaceProgramVersionLocaleVideo');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/versions/{id_version}/locales/{id_locale}/videos/{id_video}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }// path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                "{" . "id_locale" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_locale),
                $resourcePath
            );
        }// path params
        if ($id_video !== null) {
            $resourcePath = str_replace(
                "{" . "id_video" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_video),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation updateProgramVersionLocaleVideo
     *
     * Partially updates a ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param string $id_video Video Identifier (required)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function updateProgramVersionLocaleVideo($id_program, $id_version, $id_locale, $id_video)
    {
        list($response) = $this->updateProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $id_video);
        return $response;
    }


    /**
     * Operation updateProgramVersionLocaleVideoWithHttpInfo
     *
     * Partially updates a ProgramVersionLocaleVideo.
     *
     * @param string $id_program Program UUID (required)
     * @param string $id_version Version identifier (required)
     * @param string $id_locale Locale identifier (required)
     * @param string $id_video Video Identifier (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function updateProgramVersionLocaleVideoWithHttpInfo($id_program, $id_version, $id_locale, $id_video)
    {
        
        // verify the required parameter 'id_program' is set
        if ($id_program === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_program when calling updateProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling updateProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_locale' is set
        if ($id_locale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_locale when calling updateProgramVersionLocaleVideo');
        }

        // verify the required parameter 'id_video' is set
        if ($id_video === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_video when calling updateProgramVersionLocaleVideo');
        }

        // parse inputs
        $resourcePath = "/programs/{id_program}/versions/{id_version}/locales/{id_locale}/videos/{id_video}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_program !== null) {
            $resourcePath = str_replace(
                "{" . "id_program" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_program),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }// path params
        if ($id_locale !== null) {
            $resourcePath = str_replace(
                "{" . "id_locale" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_locale),
                $resourcePath
            );
        }// path params
        if ($id_video !== null) {
            $resourcePath = str_replace(
                "{" . "id_video" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_video),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
