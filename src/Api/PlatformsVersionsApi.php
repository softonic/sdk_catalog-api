<?php
/**
 * PlatformsVersionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: 2.0.17-83
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Api;

use \Softonic\CatalogApiSdk\Configuration;
use \Softonic\CatalogApiSdk\ApiClient;
use \Softonic\CatalogApiSdk\ApiException;
use \Softonic\CatalogApiSdk\ObjectSerializer;

/**
 * PlatformsVersionsApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlatformsVersionsApi
{

    /**
     * API Client
     *
     * @var \Softonic\CatalogApiSdk\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Softonic\CatalogApiSdk\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Softonic\CatalogApiSdk\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://v2.catalog.priv.sftapi.com.sft-staging.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Softonic\CatalogApiSdk\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Softonic\CatalogApiSdk\ApiClient $apiClient set the API client
     *
     * @return PlatformsVersionsApi
     */
    public function setApiClient(\Softonic\CatalogApiSdk\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPlatformVersion
     *
     * Creates a new PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformVersion $body  (optional)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function createPlatformVersion($id_platform, $body = null)
    {
        list($response) = $this->createPlatformVersionWithHttpInfo($id_platform, $body);
        return $response;
    }


    /**
     * Operation createPlatformVersionWithHttpInfo
     *
     * Creates a new PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformVersion $body  (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function createPlatformVersionWithHttpInfo($id_platform, $body = null)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling createPlatformVersion');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/versions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deletePlatformVersion
     *
     * Deletes a PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_version Platform version ID (required)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function deletePlatformVersion($id_platform, $id_version)
    {
        list($response) = $this->deletePlatformVersionWithHttpInfo($id_platform, $id_version);
        return $response;
    }


    /**
     * Operation deletePlatformVersionWithHttpInfo
     *
     * Deletes a PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_version Platform version ID (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function deletePlatformVersionWithHttpInfo($id_platform, $id_version)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling deletePlatformVersion');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling deletePlatformVersion');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/versions/{id_version}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation findPlatformVersion
     *
     * List of PlatformVersions.
     *
     * @param string $id_platform Platform ID (required)
     *
     * @return \Softonic\CatalogApiSdk\Model\PlatformVersion[]
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function findPlatformVersion($id_platform)
    {
        list($response) = $this->findPlatformVersionWithHttpInfo($id_platform);
        return $response;
    }


    /**
     * Operation findPlatformVersionWithHttpInfo
     *
     * List of PlatformVersions.
     *
     * @param string $id_platform Platform ID (required)
     *
     * @return Array of \Softonic\CatalogApiSdk\Model\PlatformVersion[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function findPlatformVersionWithHttpInfo($id_platform)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling findPlatformVersion');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/versions";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\CatalogApiSdk\Model\PlatformVersion[]'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Softonic\CatalogApiSdk\Model\PlatformVersion[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\CatalogApiSdk\Model\PlatformVersion[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation readPlatformVersion
     *
     * Fetches a single PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_version Platform version ID (required)
     *
     * @return \Softonic\CatalogApiSdk\Model\PlatformVersion
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function readPlatformVersion($id_platform, $id_version)
    {
        list($response) = $this->readPlatformVersionWithHttpInfo($id_platform, $id_version);
        return $response;
    }


    /**
     * Operation readPlatformVersionWithHttpInfo
     *
     * Fetches a single PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_version Platform version ID (required)
     *
     * @return Array of \Softonic\CatalogApiSdk\Model\PlatformVersion, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function readPlatformVersionWithHttpInfo($id_platform, $id_version)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling readPlatformVersion');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling readPlatformVersion');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/versions/{id_version}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\CatalogApiSdk\Model\PlatformVersion'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Softonic\CatalogApiSdk\Model\PlatformVersion', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\CatalogApiSdk\Model\PlatformVersion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation replacePlatformVersion
     *
     * Entirely replaces a PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_version Platform version ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformVersion $body  (optional)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function replacePlatformVersion($id_platform, $id_version, $body = null)
    {
        list($response) = $this->replacePlatformVersionWithHttpInfo($id_platform, $id_version, $body);
        return $response;
    }


    /**
     * Operation replacePlatformVersionWithHttpInfo
     *
     * Entirely replaces a PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_version Platform version ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformVersion $body  (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function replacePlatformVersionWithHttpInfo($id_platform, $id_version, $body = null)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling replacePlatformVersion');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling replacePlatformVersion');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/versions/{id_version}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation updatePlatformVersion
     *
     * Partially updates a PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_version Platform version ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformVersion $body  (optional)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function updatePlatformVersion($id_platform, $id_version, $body = null)
    {
        list($response) = $this->updatePlatformVersionWithHttpInfo($id_platform, $id_version, $body);
        return $response;
    }


    /**
     * Operation updatePlatformVersionWithHttpInfo
     *
     * Partially updates a PlatformVersion.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_version Platform version ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformVersion $body  (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function updatePlatformVersionWithHttpInfo($id_platform, $id_version, $body = null)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling updatePlatformVersion');
        }

        // verify the required parameter 'id_version' is set
        if ($id_version === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_version when calling updatePlatformVersion');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/versions/{id_version}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_version !== null) {
            $resourcePath = str_replace(
                "{" . "id_version" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_version),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
