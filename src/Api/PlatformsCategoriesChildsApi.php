<?php
/**
 * PlatformsCategoriesChildsApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: 2.0.17-83
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\CatalogApiSdk\Api;

use \Softonic\CatalogApiSdk\Configuration;
use \Softonic\CatalogApiSdk\ApiClient;
use \Softonic\CatalogApiSdk\ApiException;
use \Softonic\CatalogApiSdk\ObjectSerializer;

/**
 * PlatformsCategoriesChildsApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\CatalogApiSdk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlatformsCategoriesChildsApi
{

    /**
     * API Client
     *
     * @var \Softonic\CatalogApiSdk\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Softonic\CatalogApiSdk\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Softonic\CatalogApiSdk\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://v2.catalog.priv.sftapi.com.sft-staging.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Softonic\CatalogApiSdk\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Softonic\CatalogApiSdk\ApiClient $apiClient set the API client
     *
     * @return PlatformsCategoriesChildsApi
     */
    public function setApiClient(\Softonic\CatalogApiSdk\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPlatformCategoryChild
     *
     * Creates a new PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformCategoryChild $body  (optional)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function createPlatformCategoryChild($id_platform, $id_category, $body = null)
    {
        list($response) = $this->createPlatformCategoryChildWithHttpInfo($id_platform, $id_category, $body);
        return $response;
    }


    /**
     * Operation createPlatformCategoryChildWithHttpInfo
     *
     * Creates a new PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformCategoryChild $body  (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function createPlatformCategoryChildWithHttpInfo($id_platform, $id_category, $body = null)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling createPlatformCategoryChild');
        }

        // verify the required parameter 'id_category' is set
        if ($id_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_category when calling createPlatformCategoryChild');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/categories/{id_category}/childs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_category !== null) {
            $resourcePath = str_replace(
                "{" . "id_category" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_category),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation deletePlatformCategoryChild
     *
     * Deletes a PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param string $id_child Category child ID (required)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function deletePlatformCategoryChild($id_platform, $id_category, $id_child)
    {
        list($response) = $this->deletePlatformCategoryChildWithHttpInfo($id_platform, $id_category, $id_child);
        return $response;
    }


    /**
     * Operation deletePlatformCategoryChildWithHttpInfo
     *
     * Deletes a PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param string $id_child Category child ID (required)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function deletePlatformCategoryChildWithHttpInfo($id_platform, $id_category, $id_child)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling deletePlatformCategoryChild');
        }

        // verify the required parameter 'id_category' is set
        if ($id_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_category when calling deletePlatformCategoryChild');
        }

        // verify the required parameter 'id_child' is set
        if ($id_child === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_child when calling deletePlatformCategoryChild');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/categories/{id_category}/childs/{id_child}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_category !== null) {
            $resourcePath = str_replace(
                "{" . "id_category" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_category),
                $resourcePath
            );
        }// path params
        if ($id_child !== null) {
            $resourcePath = str_replace(
                "{" . "id_child" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_child),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation findPlatformCategoryChild
     *
     * List of PlatformCategoryChilds.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     *
     * @return \Softonic\CatalogApiSdk\Model\PlatformCategoryChild[]
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function findPlatformCategoryChild($id_platform, $id_category)
    {
        list($response) = $this->findPlatformCategoryChildWithHttpInfo($id_platform, $id_category);
        return $response;
    }


    /**
     * Operation findPlatformCategoryChildWithHttpInfo
     *
     * List of PlatformCategoryChilds.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     *
     * @return Array of \Softonic\CatalogApiSdk\Model\PlatformCategoryChild[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function findPlatformCategoryChildWithHttpInfo($id_platform, $id_category)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling findPlatformCategoryChild');
        }

        // verify the required parameter 'id_category' is set
        if ($id_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_category when calling findPlatformCategoryChild');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/categories/{id_category}/childs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_category !== null) {
            $resourcePath = str_replace(
                "{" . "id_category" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_category),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\CatalogApiSdk\Model\PlatformCategoryChild[]'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Softonic\CatalogApiSdk\Model\PlatformCategoryChild[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\CatalogApiSdk\Model\PlatformCategoryChild[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation readPlatformCategoryChild
     *
     * Fetches a single PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param string $id_child Category child ID (required)
     *
     * @return \Softonic\CatalogApiSdk\Model\PlatformCategoryChild
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function readPlatformCategoryChild($id_platform, $id_category, $id_child)
    {
        list($response) = $this->readPlatformCategoryChildWithHttpInfo($id_platform, $id_category, $id_child);
        return $response;
    }


    /**
     * Operation readPlatformCategoryChildWithHttpInfo
     *
     * Fetches a single PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param string $id_child Category child ID (required)
     *
     * @return Array of \Softonic\CatalogApiSdk\Model\PlatformCategoryChild, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function readPlatformCategoryChildWithHttpInfo($id_platform, $id_category, $id_child)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling readPlatformCategoryChild');
        }

        // verify the required parameter 'id_category' is set
        if ($id_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_category when calling readPlatformCategoryChild');
        }

        // verify the required parameter 'id_child' is set
        if ($id_child === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_child when calling readPlatformCategoryChild');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/categories/{id_category}/childs/{id_child}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_category !== null) {
            $resourcePath = str_replace(
                "{" . "id_category" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_category),
                $resourcePath
            );
        }// path params
        if ($id_child !== null) {
            $resourcePath = str_replace(
                "{" . "id_child" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_child),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\CatalogApiSdk\Model\PlatformCategoryChild'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Softonic\CatalogApiSdk\Model\PlatformCategoryChild', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\CatalogApiSdk\Model\PlatformCategoryChild', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation replacePlatformCategoryChild
     *
     * Entirely replaces a PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param string $id_child Category child ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformCategoryChild $body  (optional)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function replacePlatformCategoryChild($id_platform, $id_category, $id_child, $body = null)
    {
        list($response) = $this->replacePlatformCategoryChildWithHttpInfo($id_platform, $id_category, $id_child, $body);
        return $response;
    }


    /**
     * Operation replacePlatformCategoryChildWithHttpInfo
     *
     * Entirely replaces a PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param string $id_child Category child ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformCategoryChild $body  (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function replacePlatformCategoryChildWithHttpInfo($id_platform, $id_category, $id_child, $body = null)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling replacePlatformCategoryChild');
        }

        // verify the required parameter 'id_category' is set
        if ($id_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_category when calling replacePlatformCategoryChild');
        }

        // verify the required parameter 'id_child' is set
        if ($id_child === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_child when calling replacePlatformCategoryChild');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/categories/{id_category}/childs/{id_child}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_category !== null) {
            $resourcePath = str_replace(
                "{" . "id_category" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_category),
                $resourcePath
            );
        }// path params
        if ($id_child !== null) {
            $resourcePath = str_replace(
                "{" . "id_child" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_child),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
    /**
     * Operation updatePlatformCategoryChild
     *
     * Partially updates a PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param string $id_child Category child ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformCategoryChild $body  (optional)
     *
     * @return void
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function updatePlatformCategoryChild($id_platform, $id_category, $id_child, $body = null)
    {
        list($response) = $this->updatePlatformCategoryChildWithHttpInfo($id_platform, $id_category, $id_child, $body);
        return $response;
    }


    /**
     * Operation updatePlatformCategoryChildWithHttpInfo
     *
     * Partially updates a PlatformCategoryChild.
     *
     * @param string $id_platform Platform ID (required)
     * @param string $id_category Category ID (required)
     * @param string $id_child Category child ID (required)
     * @param \Softonic\CatalogApiSdk\Model\PlatformCategoryChild $body  (optional)
     *
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Softonic\CatalogApiSdk\ApiException on non-2xx response
     */
    public function updatePlatformCategoryChildWithHttpInfo($id_platform, $id_category, $id_child, $body = null)
    {
        
        // verify the required parameter 'id_platform' is set
        if ($id_platform === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_platform when calling updatePlatformCategoryChild');
        }

        // verify the required parameter 'id_category' is set
        if ($id_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_category when calling updatePlatformCategoryChild');
        }

        // verify the required parameter 'id_child' is set
        if ($id_child === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_child when calling updatePlatformCategoryChild');
        }

        // parse inputs
        $resourcePath = "/platforms/{id_platform}/categories/{id_category}/childs/{id_child}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        
        
        // path params
        if ($id_platform !== null) {
            $resourcePath = str_replace(
                "{" . "id_platform" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_platform),
                $resourcePath
            );
        }// path params
        if ($id_category !== null) {
            $resourcePath = str_replace(
                "{" . "id_category" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_category),
                $resourcePath
            );
        }// path params
        if ($id_child !== null) {
            $resourcePath = str_replace(
                "{" . "id_child" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_child),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams
            );
            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
